{"version":3,"sources":["adex-staking.svg","themeMUi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","palette","primary","main","contrastText","accentOne","accentTwo","grey","error","deepOrange","warning","amber","first","lime","contrastThreshold","tonalOffset","text","theme","createMuiTheme","typography","fontFamily","fontSize","overrides","MuiButton","root","borderRadius","outlined","MuiTableCell","head","whiteSpace","MuiPaper","rounded","MuiTooltip","tooltip","themeMUI","responsiveFontSizes","options","factor","ADDR_ADX","ADDR_STAKING","ADX_MULTIPLIER","REFRESH_INTVL","provider","getDefaultProvider","Staking","Contract","StakingABI","Token","ERC20ABI","PRICES_API_URL","UNBOND_DAYS","POOLS","label","id","selectable","ZERO","bigNumberify","DEFAULT_BOND","poolId","amount","EMPTY_STATS","loaded","userBonds","userBalance","totalStake","StatsCard","title","subtitle","extra","Paper","elevation","style","margin","spacing","padding","minHeight","Typography","variant","color","LinearProgress","Dashboard","stats","onRequestUnbond","onUnbond","userTotalStake","filter","x","status","map","reduce","a","b","add","useState","prices","setPrices","useEffect","fetch","then","r","json","catch","console","inUSD","adxAmount","USD","usdAmount","toNumber","toFixed","headerCellStyle","fontWeight","Grid","container","maxWidth","item","sm","xs","formatADX","TableContainer","Table","aria-label","marginTop","TableHead","TableRow","TableCell","align","TableBody","bond","pool","find","poolLabel","key","getBondId","willUnlock","getTime","now","Date","days","Math","ceil","bondStatus","Button","onClick","disabled","num","owner","nonce","keccak256","defaultAbiCoder","encode","getSigner","async","window","ethereum","enable","web3","Web3Provider","currentProvider","signer","loadUserStats","getAddress","addr","Promise","all","balanceOf","getLogs","fromBlock","address","topics","hexZeroPad","bal","logs","bonds","log","topic","evs","interface","events","LogBond","vals","parseLog","values","push","LogUnbondRequested","bondId","LogUnbonded","Boolean","location","hostname","match","ReactDOM","render","isNewBondOpen","setNewBondOpen","React","toUnbond","setToUnbond","setStats","refreshStats","userStats","loadStats","e","intvl","setInterval","clearInterval","makeUnbondFn","isUnbond","staking","fn","unbond","bind","requestUnbond","tx","wait","AppBar","position","Toolbar","height","src","logo","alt","Fab","right","top","onDeny","onConfirm","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","autoFocus","UnbondConfirmationDialog","Modal","display","alignItems","justifyContent","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","maxAmount","onNewBond","pools","setBond","confirmation","setConfirmation","minWidthStyle","minWidth","width","TextField","required","type","value","onChange","ev","abs","floor","target","lt","FormControl","InputLabel","Select","MenuItem","FormControlLabel","userSelect","control","Checkbox","checked","gt","NewBondForm","stakingWithSigner","tokenWithSigner","allowance","txns","eq","approve","gasLimit","addBond","createNewBond","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.660fd1c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/adex-staking.bf64bad2.svg\";","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\"\nimport lime from \"@material-ui/core/colors/lime\"\nimport deepOrange from \"@material-ui/core/colors/deepOrange\"\nimport amber from \"@material-ui/core/colors/amber\"\nimport grey from \"@material-ui/core/colors/grey\"\n\nconst WHITE = \"#fff\"\nexport const PRIMARY = \"#1B75BC\"\nexport const SECONDARY = \"#FFAC00\"\nexport const ALEX_GREY = \"#3f3e3e\"\nexport const ACCENT_ONE = \"#57467B\"\nexport const ACCENT_TWO = \"#7CB4B8\"\n\nconst palette = {\n\tprimary: { main: PRIMARY, contrastText: WHITE },\n\t//secondary: { main: SECONDARY, contrastText: WHITE },\n\taccentOne: { main: ACCENT_ONE, contrastText: WHITE },\n\taccentTwo: { main: ACCENT_TWO, contrastText: WHITE },\n\tgrey: { main: ALEX_GREY, contrastText: WHITE },\n\terror: deepOrange,\n\twarning: amber,\n\tfirst: lime,\n\tcontrastThreshold: 3,\n\ttonalOffset: 0.2,\n\ttext: grey\n}\n\nconst theme = createMuiTheme({\n\ttypography: {\n\t\tfontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n\t\tfontSize: 13\n\t},\n\tpalette: { ...palette },\n\toverrides: {\n\t\tMuiButton: {\n\t\t\troot: {\n\t\t\t\tborderRadius: 0\n\t\t\t},\n\t\t\toutlined: {\n\t\t\t\tborderRadius: 0\n\t\t\t}\n\t\t},\n\t\tMuiTableCell: {\n\t\t\thead: {\n\t\t\t\twhiteSpace: \"nowrap\"\n\t\t\t},\n\t\t\troot: {\n\t\t\t\twhiteSpace: \"nowrap\"\n\t\t\t}\n\t\t},\n\t\tMuiPaper: {\n\t\t\trounded: {\n\t\t\t\tborderRadius: 0\n\t\t\t}\n\t\t},\n\t\tMuiTooltip: {\n\t\t\ttooltip: { borderRadius: 0 }\n\t\t}\n\t}\n})\n\nexport const themeMUI = responsiveFontSizes(theme, {\n\toptions: [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n\tfactor: 3\n})\n","import React, { useEffect, useState } from \"react\"\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\nimport { themeMUI } from \"./themeMUi\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Button from \"@material-ui/core/Button\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Select from \"@material-ui/core/Select\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport Modal from \"@material-ui/core/Modal\"\nimport Backdrop from \"@material-ui/core/Backdrop\"\nimport Fab from \"@material-ui/core/Fab\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport Fade from \"@material-ui/core/Fade\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Typography from \"@material-ui/core/Typography\"\nimport logo from \"./adex-staking.svg\"\nimport { Contract, getDefaultProvider } from \"ethers\"\nimport {\n\tbigNumberify,\n\tid,\n\thexZeroPad,\n\tkeccak256,\n\tdefaultAbiCoder\n} from \"ethers/utils\"\nimport { Web3Provider } from \"ethers/providers\"\nimport StakingABI from \"./abi/Staking\"\nimport ERC20ABI from \"./abi/ERC20\"\n\nconst ADDR_ADX = \"0x4470bb87d77b963a013db939be332f927f2b992e\"\nconst ADDR_STAKING = \"0x46ad2d37ceaee1e82b70b867e674b903a4b4ca32\"\nconst ADX_MULTIPLIER = 10000\nconst REFRESH_INTVL = 30000\n\nconst provider = getDefaultProvider()\nconst Staking = new Contract(ADDR_STAKING, StakingABI, provider)\nconst Token = new Contract(ADDR_ADX, ERC20ABI, provider)\n\nconst PRICES_API_URL =\n\t\"https://min-api.cryptocompare.com/data/price?fsym=ADX&tsyms=BTC,USD,EUR\"\n\nconst UNBOND_DAYS = 30\n\nconst POOLS = [\n\t{\n\t\tlabel: \"Validator Tom\",\n\t\tid: id(\"validator:0x2892f6C41E0718eeeDd49D98D648C789668cA67d\"),\n\t\tselectable: true\n\t},\n\t{\n\t\tlabel: \"Validator Jerry\",\n\t\tid: id(\"validator:0xce07CbB7e054514D590a0262C93070D838bFBA2e\"),\n\t\tselectable: false\n\t}\n]\n\nconst ZERO = bigNumberify(0)\nconst DEFAULT_BOND = {\n\tpoolId: \"\",\n\tamount: ZERO\n}\nconst EMPTY_STATS = {\n\tloaded: false,\n\tuserBonds: [],\n\tuserBalance: ZERO,\n\ttotalStake: ZERO\n}\n\nfunction StatsCard({ title, subtitle, extra, loaded }) {\n\treturn (\n\t\t<Paper elevation={3} style={{ margin: themeMUI.spacing(1) }}>\n\t\t\t<div style={{ padding: themeMUI.spacing(2), minHeight: \"75px\" }}>\n\t\t\t\t<Typography variant=\"h5\">{subtitle}</Typography>\n\t\t\t\t{extra ? (\n\t\t\t\t\t<Typography color=\"primary\" variant=\"h6\">\n\t\t\t\t\t\t{extra}\n\t\t\t\t\t</Typography>\n\t\t\t\t) : (\n\t\t\t\t\t<></>\n\t\t\t\t)}\n\t\t\t\t<Typography color=\"textSecondary\" variant=\"subtitle2\">\n\t\t\t\t\t{title}\n\t\t\t\t</Typography>\n\t\t\t</div>\n\t\t\t{!loaded ? <LinearProgress /> : <></>}\n\t\t</Paper>\n\t)\n}\n\nfunction NewBondForm({ maxAmount, onNewBond, pools }) {\n\tconst [bond, setBond] = useState(DEFAULT_BOND)\n\tconst [confirmation, setConfirmation] = useState(false)\n\tconst minWidthStyle = { minWidth: \"180px\" }\n\tconst minBN = (a, b) => (a.lt(b) ? a : b)\n\treturn (\n\t\t<Paper\n\t\t\televation={2}\n\t\t\tstyle={{ width: \"500px\", padding: themeMUI.spacing(2, 4, 3) }}\n\t\t>\n\t\t\t<h2>Create a bond</h2>\n\t\t\t<Grid container spacing={2}>\n\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tlabel=\"ADX amount\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tstyle={minWidthStyle}\n\t\t\t\t\t\tvalue={bond.amount.toNumber() / ADX_MULTIPLIER}\n\t\t\t\t\t\tonChange={ev =>\n\t\t\t\t\t\t\tsetBond({\n\t\t\t\t\t\t\t\t...bond,\n\t\t\t\t\t\t\t\tamount: minBN(\n\t\t\t\t\t\t\t\t\tmaxAmount,\n\t\t\t\t\t\t\t\t\tbigNumberify(\n\t\t\t\t\t\t\t\t\t\tMath.abs(Math.floor(ev.target.value * ADX_MULTIPLIER))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t></TextField>\n\t\t\t\t\t<Typography variant=\"subtitle2\">\n\t\t\t\t\t\tMax amount:\n\t\t\t\t\t\t<Button onClick={ev => setBond({ ...bond, amount: maxAmount })}>\n\t\t\t\t\t\t\t{formatADX(maxAmount)} ADX\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Typography>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t<FormControl required>\n\t\t\t\t\t\t<InputLabel>Pool</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tstyle={minWidthStyle}\n\t\t\t\t\t\t\tvalue={bond.poolId}\n\t\t\t\t\t\t\tonChange={ev => setBond({ ...bond, poolId: ev.target.value })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value={\"\"}>\n\t\t\t\t\t\t\t\t<em>None</em>\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t{pools.map(({ label, id }) => (\n\t\t\t\t\t\t\t\t<MenuItem key={id} value={id}>\n\t\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tstyle={{ userSelect: \"none\" }}\n\t\t\t\t\t\tlabel={`I understand I am locking up my ADX for at least ${UNBOND_DAYS} days and I am familiar with the staking terms.`}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={confirmation}\n\t\t\t\t\t\t\t\tonChange={ev => setConfirmation(ev.target.checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t></FormControlLabel>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<FormControl style={{ display: \"flex\" }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={!(bond.poolId && confirmation && bond.amount.gt(ZERO))}\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tonClick={() => onNewBond(bond)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tStake ADX\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Paper>\n\t)\n}\n\nfunction UnbondConfirmationDialog({ toUnbond, onDeny, onConfirm }) {\n\treturn (\n\t\t<Dialog open={!!toUnbond} onClose={onDeny}>\n\t\t\t<DialogTitle id=\"alert-dialog-title\">Are you sure?</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\tAre you sure you want to request unbonding of{\" \"}\n\t\t\t\t{formatADX(toUnbond ? toUnbond.amount : ZERO)} ADX?\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\tPlease be aware:\n\t\t\t\t<ol>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tIt will take {UNBOND_DAYS} days before you will be able to withdraw\n\t\t\t\t\t\tyour ADX!\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tYou will not receive staking rewards for this amount in this period.\n\t\t\t\t\t</li>\n\t\t\t\t</ol>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button onClick={onDeny} autoFocus color=\"primary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={onConfirm} color=\"primary\">\n\t\t\t\t\tUnbond\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t)\n}\n\nfunction Dashboard({ stats, onRequestUnbond, onUnbond }) {\n\tconst userTotalStake = stats.userBonds\n\t\t.filter(x => x.status === \"Active\")\n\t\t.map(x => x.amount)\n\t\t.reduce((a, b) => a.add(b), ZERO)\n\n\t// USD values\n\tconst [prices, setPrices] = useState({})\n\tconst refreshPrices = () =>\n\t\tfetch(PRICES_API_URL)\n\t\t\t.then(r => r.json())\n\t\t\t.then(setPrices)\n\t\t\t.catch(console.error)\n\tuseEffect(() => {\n\t\trefreshPrices()\n\t}, [])\n\tconst inUSD = adxAmount => {\n\t\tif (!adxAmount) return null\n\t\tif (!prices.USD) return null\n\t\tconst usdAmount = (adxAmount.toNumber(10) / ADX_MULTIPLIER) * prices.USD\n\t\treturn `${usdAmount.toFixed(2)} USD`\n\t}\n\n\tconst bondStatus = bond => {\n\t\tif (bond.status === \"UnbondRequested\") {\n\t\t\tconst willUnlock = bond.willUnlock.getTime()\n\t\t\tconst now = Date.now()\n\t\t\tif (willUnlock > now) {\n\t\t\t\tconst days = Math.ceil((willUnlock - now) / 86400000)\n\t\t\t\treturn `Can unbond in ${days} days`\n\t\t\t} else {\n\t\t\t\treturn \"Can unbond\"\n\t\t\t}\n\t\t}\n\t\treturn bond.status\n\t}\n\n\tconst renderBondRow = bond => {\n\t\tconst pool = POOLS.find(x => x.id === bond.poolId)\n\t\tconst poolLabel = pool ? pool.label : bond.poolId\n\t\treturn (\n\t\t\t<TableRow key={getBondId(bond)}>\n\t\t\t\t<TableCell>{formatADX(bond.amount)} ADX</TableCell>\n\t\t\t\t<TableCell align=\"right\">0.00 DAI</TableCell>\n\t\t\t\t<TableCell align=\"right\">{poolLabel}</TableCell>\n\t\t\t\t<TableCell align=\"right\">{bondStatus(bond)}</TableCell>\n\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t{bond.status === \"Active\" ? (\n\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onRequestUnbond(bond)}>\n\t\t\t\t\t\t\tRequest Unbond\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={bond.willUnlock.getTime() > Date.now()}\n\t\t\t\t\t\t\tonClick={() => onUnbond(bond)}\n\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUnbond\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t)\n\t}\n\n\tconst headerCellStyle = { fontWeight: \"bold\" }\n\treturn (\n\t\t<Grid\n\t\t\tcontainer\n\t\t\tstyle={{\n\t\t\t\tpadding: themeMUI.spacing(4),\n\t\t\t\tmaxWidth: \"1200px\",\n\t\t\t\tmargin: \"auto\"\n\t\t\t}}\n\t\t>\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Total ADX staked\",\n\t\t\t\t\textra: inUSD(stats.totalStake),\n\t\t\t\t\tsubtitle: formatADX(stats.totalStake) + \" ADX\"\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Your total active stake\",\n\t\t\t\t\textra: inUSD(userTotalStake),\n\t\t\t\t\tsubtitle: formatADX(userTotalStake) + \" ADX\"\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Your balance\",\n\t\t\t\t\tsubtitle: stats.userBalance\n\t\t\t\t\t\t? formatADX(stats.userBalance) + \" ADX\"\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\textra: inUSD(stats.userBalance)\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\t// @TODO rewards\n\t\t\t\t\ttitle: \"Your total reward\",\n\t\t\t\t\textra: \"0.00 USD\",\n\t\t\t\t\tsubtitle: \"0.00 DAI\"\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t{/*<Grid item xs={12}>\n\t\t\t// TODO information about \"reward are not launched yet blabla\"\n\t\t\t</Grid>*/}\n\n\t\t\t<TableContainer xs={12}>\n\t\t\t\t<Table\n\t\t\t\t\taria-label=\"Bonds table\"\n\t\t\t\t\tstyle={{ marginTop: themeMUI.spacing(2) }}\n\t\t\t\t>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle}>Bond amount</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tReward to collect\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tPool\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tActions\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>{(stats.userBonds || []).map(renderBondRow)}</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t</Grid>\n\t)\n}\n\nexport default function App() {\n\tconst [isNewBondOpen, setNewBondOpen] = useState(false)\n\tconst [toUnbond, setToUnbond] = React.useState(null)\n\tconst [stats, setStats] = useState(EMPTY_STATS)\n\n\tconst refreshStats = () =>\n\t\tloadStats()\n\t\t\t.then(setStats)\n\t\t\t.catch(e => console.error(\"loadStats\", e))\n\tuseEffect(() => {\n\t\trefreshStats()\n\t\tconst intvl = setInterval(refreshStats, REFRESH_INTVL)\n\t\treturn () => clearInterval(intvl)\n\t}, [])\n\n\tconst onNewBond = bond => {\n\t\tsetNewBondOpen(false)\n\t\tcreateNewBond(stats, bond)\n\t}\n\t// @TODO: move to a separate method\n\t// @TODO handle the case if there is no signer\n\tconst makeUnbondFn = isUnbond => async ({ amount, poolId, nonce }) => {\n\t\tconst signer = await getSigner()\n\t\tif (!signer) return\n\t\tconst staking = new Contract(ADDR_STAKING, StakingABI, signer)\n\t\tconst fn = isUnbond\n\t\t\t? staking.unbond.bind(staking)\n\t\t\t: staking.requestUnbond.bind(staking)\n\t\tconst tx = await fn([amount, poolId, nonce || ZERO])\n\t\tawait tx.wait()\n\t}\n\tconst onRequestUnbond = makeUnbondFn(false)\n\tconst onUnbond = makeUnbondFn(true)\n\n\treturn (\n\t\t<MuiThemeProvider theme={themeMUI}>\n\t\t\t<AppBar position=\"static\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<img height=\"40vh\" src={logo} alt=\"logo\"></img>\n\t\t\t\t\t<Fab\n\t\t\t\t\t\tdisabled={!stats.loaded}\n\t\t\t\t\t\tonClick={() => setNewBondOpen(true)}\n\t\t\t\t\t\tvariant=\"extended\"\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ position: \"absolute\", right: \"5%\", top: \"50%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<AddIcon style={{ margin: themeMUI.spacing(1) }} />\n\t\t\t\t\t\tStake your ADX\n\t\t\t\t\t</Fab>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\n\t\t\t{// if we set onRequestUnbond to setToUnbond, we will get the confirmation dialog\n\t\t\tDashboard({ stats, onRequestUnbond: setToUnbond, onUnbond })}\n\n\t\t\t{UnbondConfirmationDialog({\n\t\t\t\ttoUnbond,\n\t\t\t\tonDeny: () => setToUnbond(null),\n\t\t\t\tonConfirm: () => {\n\t\t\t\t\tif (toUnbond) onRequestUnbond(toUnbond)\n\t\t\t\t\tsetToUnbond(null)\n\t\t\t\t}\n\t\t\t})}\n\n\t\t\t<Modal\n\t\t\t\topen={isNewBondOpen}\n\t\t\t\tonClose={() => setNewBondOpen(false)}\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t}}\n\t\t\t\tcloseAfterTransition\n\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\tBackdropProps={{\n\t\t\t\t\ttimeout: 300\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Fade in={isNewBondOpen}>\n\t\t\t\t\t{NewBondForm({\n\t\t\t\t\t\tpools: POOLS.filter(x => x.selectable),\n\t\t\t\t\t\tmaxAmount: stats.userBalance,\n\t\t\t\t\t\tonNewBond\n\t\t\t\t\t})}\n\t\t\t\t</Fade>\n\t\t\t</Modal>\n\t\t</MuiThemeProvider>\n\t)\n}\n\nfunction formatADX(num) {\n\treturn (num.toNumber(10) / ADX_MULTIPLIER).toFixed(2)\n}\n\nfunction getBondId({ owner, amount, poolId, nonce }) {\n\treturn keccak256(\n\t\tdefaultAbiCoder.encode(\n\t\t\t[\"address\", \"address\", \"uint\", \"bytes32\", \"uint\"],\n\t\t\t[ADDR_STAKING, owner, amount, poolId, nonce]\n\t\t)\n\t)\n}\n\nasync function getSigner() {\n\tif (typeof window.ethereum !== \"undefined\") {\n\t\tawait window.ethereum.enable()\n\t}\n\n\tif (!window.web3) return null\n\n\tconst provider = new Web3Provider(window.web3.currentProvider)\n\tconst signer = provider.getSigner()\n\treturn signer\n}\n\nasync function loadStats() {\n\tconst [totalStake, userStats] = await Promise.all([\n\t\tToken.balanceOf(ADDR_STAKING),\n\t\tloadUserStats()\n\t])\n\treturn { totalStake, ...userStats }\n}\n\nasync function loadUserStats() {\n\tconst signer = await getSigner()\n\tif (!signer)\n\t\treturn {\n\t\t\tloaded: true,\n\t\t\tuserBonds: [],\n\t\t\tuserBalance: ZERO\n\t\t}\n\n\tconst addr = await signer.getAddress()\n\n\tconst [bal, logs] = await Promise.all([\n\t\tToken.balanceOf(addr),\n\t\tprovider.getLogs({\n\t\t\tfromBlock: 0,\n\t\t\taddress: ADDR_STAKING,\n\t\t\ttopics: [null, hexZeroPad(addr, 32)]\n\t\t})\n\t])\n\tconst userBonds = logs.reduce((bonds, log) => {\n\t\tconst topic = log.topics[0]\n\t\tconst evs = Staking.interface.events\n\t\tif (topic === evs.LogBond.topic) {\n\t\t\tconst vals = Staking.interface.parseLog(log).values\n\t\t\tconst { owner, amount, poolId, nonce } = vals\n\t\t\tconst bond = { owner, amount, poolId, nonce }\n\t\t\tbonds.push({ id: getBondId(bond), status: \"Active\", ...bond })\n\t\t} else if (topic === evs.LogUnbondRequested.topic) {\n\t\t\t// NOTE: assuming that .find() will return something is safe, as long as the logs are properly ordered\n\t\t\tconst { bondId, willUnlock } = Staking.interface.parseLog(log).values\n\t\t\tconst bond = bonds.find(({ id }) => id === bondId)\n\t\t\tbond.status = \"UnbondRequested\"\n\t\t\tbond.willUnlock = new Date(willUnlock * 1000)\n\t\t} else if (topic === evs.LogUnbonded.topic) {\n\t\t\tconst { bondId } = Staking.interface.parseLog(log).values\n\t\t\tbonds.find(({ id }) => id === bondId).status = \"Unbonded\"\n\t\t}\n\t\treturn bonds\n\t}, [])\n\treturn {\n\t\tloaded: true,\n\t\tuserBonds,\n\t\tuserBalance: bal\n\t}\n}\n\n// @TODO handle exceptions\nasync function createNewBond(stats, { amount, poolId, nonce }) {\n\t// @TODO handle errors in some way\n\tif (!poolId) return\n\tif (!stats.userBalance) return\n\tif (amount.gt(stats.userBalance)) return\n\tconst signer = await getSigner()\n\tif (!signer) return\n\tconst stakingWithSigner = new Contract(ADDR_STAKING, StakingABI, signer)\n\tconst tokenWithSigner = new Contract(ADDR_ADX, ERC20ABI, signer)\n\tconst allowance = await tokenWithSigner.allowance(\n\t\tawait signer.getAddress(),\n\t\tADDR_STAKING\n\t)\n\tlet txns = []\n\t// Hardcoded gas limit to avoid doing estimateGas - if we do gasEstimate, it will fail on txns[1] cause it depends on txns[0].\n\t// which isn't going to be mined at the time of signing\n\tif (!allowance.eq(amount)) {\n\t\tif (allowance.gt(ZERO)) {\n\t\t\ttxns.push(\n\t\t\t\tawait tokenWithSigner.approve(ADDR_STAKING, ZERO, { gasLimit: 80000 })\n\t\t\t)\n\t\t}\n\t\ttxns.push(\n\t\t\tawait tokenWithSigner.approve(ADDR_STAKING, amount, {\n\t\t\t\tgasLimit: 80000\n\t\t\t})\n\t\t)\n\t}\n\ttxns.push(\n\t\tawait stakingWithSigner.addBond([amount, poolId, nonce || ZERO], {\n\t\t\tgasLimit: 110000\n\t\t})\n\t)\n\t// const receipts = await Promise.all(txns.map(tx => tx.wait()))\n\tawait Promise.all(txns.map(tx => tx.wait()))\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}