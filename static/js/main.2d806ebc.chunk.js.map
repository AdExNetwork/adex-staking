{"version":3,"sources":["adex-staking.svg","themeMUi.js","components/StatsCard.js","helpers/constants.js","helpers/utils.js","components/Dashboard.js","components/RewardCard.js","components/NewBondForm.js","App.js","serviceWorker.js","index.js","components/HelperMenu.js","components/UnbondConfirmationDialog.js"],"names":["module","exports","palette","primary","main","contrastText","accentOne","accentTwo","grey","error","deepOrange","warning","amber","first","lime","contrastThreshold","tonalOffset","text","theme","createMuiTheme","typography","fontFamily","fontSize","overrides","MuiButton","root","borderRadius","outlined","MuiTableCell","head","whiteSpace","MuiPaper","rounded","MuiTooltip","tooltip","themeMUI","responsiveFontSizes","options","factor","StatsCard","title","subtitle","extra","loaded","actions","extraElem","Typography","color","variant","Paper","elevation","style","margin","spacing","padding","minHeight","LinearProgress","ADDR_STAKING","ZERO","bigNumberify","DEFAULT_BOND","poolId","amount","POOLS","label","id","selectable","minStakingAmount","rewardPolicy","slashPolicy","url","getPool","find","x","getBondId","owner","nonce","keccak256","defaultAbiCoder","encode","formatADX","num","toNumber","toFixed","Dashboard","stats","onRequestUnbond","onUnbond","onClaimRewards","userTotalStake","userBonds","filter","status","map","reduce","a","b","add","useState","prices","setPrices","useEffect","fetch","then","r","json","catch","console","inUSD","adxAmount","USD","usdAmount","bondExplanationMsg","display","alignItems","marginRight","bondExplanationFrag","length","Grid","item","xs","marginTop","SnackbarContent","backgroundColor","message","headerCellStyle","fontWeight","container","maxWidth","sm","rewardChannels","totalReward","outstandingReward","Button","size","disabled","eq","onClick","div","RewardCard","totalStake","userBalance","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","reverse","bond","pool","poolLabel","key","currentAmount","willUnlock","getTime","now","Date","days","Math","ceil","bondStatus","NewBondForm","maxAmount","onNewBond","pools","setBond","stakingAmount","setStakingAmount","amountErr","setAmountErr","amountErrText","setAmountErrText","confirmation","setConfirmation","setPool","minWidthStyle","minWidth","activePool","stakingRulesFrag","confirmationLabel","href","target","validateFields","params","amountBN","poolToValidate","minStakingAmountBN","gt","lt","width","TextField","required","type","value","onChange","ev","floor","updateStakingAmount","helperText","FormControl","InputLabel","Select","updatePool","MenuItem","FormControlLabel","userSelect","control","Checkbox","checked","ADDR_CORE","ADDR_ADX","provider","getDefaultProvider","Staking","Contract","StakingABI","Token","ERC20ABI","Core","CoreABI","MAX_SLASH","EMPTY_STATS","Alert","props","getSigner","async","window","ethereum","enable","web3","Web3Provider","currentProvider","signer","loadUserStats","getAddress","addr","Promise","all","loadBondStats","getRewards","bondStats","balanceOf","getLogs","fromBlock","address","topics","hexZeroPad","filters","LogSlash","logs","slashLogs","slashedByPool","log","interface","parseLog","values","newSlashPts","bonds","topic","evs","events","LogBond","vals","slashedAtStart","push","mul","sub","LogUnbondRequested","bondId","LogUnbonded","rewardPool","resp","validUntil","rewardChannel","channelArgs","balances","balanceTree","BalanceTree","withdrawnPerUser","channelId","proof","getProof","stateRoot","mTree","getRoot","forUser","createNewBond","stakingWithSigner","tokenWithSigner","allowance","txns","approve","gasLimit","addBond","tx","wait","claimRewards","coreWithSigner","args","channelTuple","creator","tokenAddr","tokenAmount","validators","spec","channelWithdraw","signatures","Boolean","location","hostname","match","ReactDOM","render","isNewBondOpen","setNewBondOpen","React","toUnbond","setToUnbond","openErr","setOpenErr","snackbarErr","setSnackbarErr","setStats","refreshStats","userStats","loadStats","e","code","intvl","setInterval","clearInterval","makeUnbondFn","isUnbond","staking","fn","unbond","bind","requestUnbond","handleClose","event","reason","AppBar","position","Toolbar","height","src","logo","alt","Fab","right","top","menuEl","setMenuEl","closeHelpMenu","IconButton","currentTarget","Menu","anchorEl","open","keepMounted","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Link","HelperMenu","onDeny","onConfirm","Dialog","DialogTitle","DialogContent","DialogActions","autoFocus","UnbondConfirmationDialog","Snackbar","autoHideDuration","severity","Modal","justifyContent","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wxEAAAA,EAAOC,QAAU,IAA0B,0C,8YCarCC,EAAU,CACfC,QAAS,CAAEC,KAPW,UAOIC,aARb,QAUbC,UAAW,CAAEF,KANY,UAMMC,aAVlB,QAWbE,UAAW,CAAEH,KANY,UAMMC,aAXlB,QAYbG,KAAM,CAAEJ,KATgB,UASCC,aAZZ,QAabI,MAAOC,IACPC,QAASC,IACTC,MAAOC,IACPC,kBAAmB,EACnBC,YAAa,GACbC,KAAMT,KAGDU,EAAQC,YAAe,CAC5BC,WAAY,CACXC,WAAY,6CACZC,SAAU,IAEXpB,QAAQ,eAAMA,GACdqB,UAAW,CACVC,UAAW,CACVC,KAAM,CACLC,aAAc,GAEfC,SAAU,CACTD,aAAc,IAGhBE,aAAc,CACbC,KAAM,CACLC,WAAY,UAEbL,KAAM,CACLK,WAAY,WAGdC,SAAU,CACTC,QAAS,CACRN,aAAc,IAGhBO,WAAY,CACXC,QAAS,CAAER,aAAc,OAKfS,EAAWC,YAAoBlB,EAAO,CAClDmB,QAAS,CAAC,KAAM,KAAM,KAAM,KAAM,MAClCC,OAAQ,I,4XCzDM,SAASC,GAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAC7DC,EACY,kBAAVH,EACN,kBAACI,GAAA,EAAD,CAAYC,MAAM,UAAUC,QAAQ,MAClCN,GAGFA,GAAS,qCAEX,OACC,kBAACO,GAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAAEC,OAAQjB,EAASkB,QAAQ,KACtD,yBAAKF,MAAO,CAAEG,QAASnB,EAASkB,QAAQ,GAAIE,UAAW,SACtD,kBAACT,GAAA,EAAD,CAAYE,QAAQ,MAAMP,GACzBI,EACD,kBAACC,GAAA,EAAD,CAAYC,MAAM,gBAAgBC,QAAQ,aACxCR,GAEDI,GAAW,sCAEXD,EAA8B,qCAArB,kBAACa,GAAA,EAAD,OCvBP,IAAMC,GAAe,6CACfC,GAAOC,uBAAa,GAOpBC,GAAe,CAC3BC,OAAQ,GACRC,OAAQJ,IAGIK,GAAQ,CACpB,CACCC,MAAO,gBACPC,GAAIA,aAAG,wDACPC,YAAY,EACZC,iBAAkB,EAClBC,aACC,sRACDC,YAAa,eACbC,IAAK,4BAEN,CACCN,MAAO,kBACPC,GAAIA,aAAG,wDACPC,YAAY,EACZC,iBAAkB,EAClBC,aAAc,GACdC,YAAa,KC7BFE,GAAU,SAAAV,GAAM,OAAIE,GAAMS,MAAK,SAAAC,GAAC,OAAIA,EAAER,KAAOJ,MACnD,SAASa,GAAT,GAAsD,IAAjCC,EAAgC,EAAhCA,MAAOb,EAAyB,EAAzBA,OAAQD,EAAiB,EAAjBA,OAAQe,EAAS,EAATA,MAClD,OAAOC,oBACNC,kBAAgBC,OACf,CAAC,UAAW,UAAW,OAAQ,UAAW,QAC1C,CAACtB,GAAckB,EAAOb,EAAQD,EAAQe,KAIlC,SAASI,GAAUC,GACzB,OAAQA,EAAIC,SAAS,IDPQ,KCOcC,QAAQ,GCWrC,SAASC,GAAT,GAKX,IAJHC,EAIE,EAJFA,MACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,SACAC,EACE,EADFA,eAEMC,EAAiBJ,EAAMK,UAC3BC,QAAO,SAAAlB,GAAC,MAAiB,WAAbA,EAAEmB,UACdC,KAAI,SAAApB,GAAC,OAAIA,EAAEX,UACXgC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,IAAID,KAAItC,IAJ3B,EAO0BwC,mBAAS,IAPnC,mBAOKC,EAPL,KAOaC,EAPb,KAaFC,qBAAU,WAJTC,MFjCD,2EEkCGC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,KAAKH,GACLM,MAAMC,QAAQlG,SAGd,IACH,IAAMmG,EAAQ,SAAAC,GACb,IAAKA,EAAW,OAAO,KACvB,IAAKV,EAAOW,IAAK,OAAO,KACxB,IAAMC,EAAaF,EAAU3B,SAAS,IF1CV,IE0CkCiB,EAAOW,IACrE,MAAM,GAAN,OAAUC,EAAU5B,QAAQ,GAA5B,SA8CK6B,EACL,yBAAK7D,MAAO,CAAE8D,QAAS,OAAQC,WAAY,WAC1C,kBAAC,KAAD,CAAU/D,MAAO,CAAEgE,YAAahF,EAASkB,QAAQ,MACjD,4PF3FwB,GE2FxB,yBAQI+D,GACJ/B,EAAM1C,QAAU0C,EAAMK,UAAU2B,OAChC,qCAEA,kBAACC,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIrE,MAAO,CAAEsE,UAAWtF,EAASkB,QAAQ,KACvD,kBAACqE,GAAA,EAAD,CACCvE,MAAO,CACN7B,SAAU,OACVqG,gBAAiBxF,EAASjC,QAAQC,QAAQC,MAE3CwH,QAASZ,KAKPa,EAAkB,CAAEC,WAAY,QACtC,OACC,kBAACR,GAAA,EAAD,CACCS,WAAS,EACT5E,MAAO,CACNG,QAASnB,EAASkB,QAAQ,GAC1B2E,SAAU,SACV5E,OAAQ,SAGT,kBAACkE,GAAA,EAAD,CAAMC,MAAI,EAACU,GAAI,EAAGT,GAAI,GC7HV,YAAyD,IAAnCU,EAAkC,EAAlCA,eAAgB1C,EAAkB,EAAlBA,eAC9ChD,EAAQ,8BACRG,EAA2B,MAAlBuF,EACf,IAAKvF,EACJ,OAAOJ,GAAU,CAChBI,SACAH,QACAE,MAAO,WACPD,SAAU,aAGZ,IFDyBwC,EECnBkD,EAAcD,EAClBrC,KAAI,SAAApB,GAAC,OAAIA,EAAE2D,qBACXtC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,IAAID,KAAItC,IAY7B,OAAOnB,GAAU,CAChBI,QAAQ,EACRH,QACAI,QAbA,kBAACyF,GAAA,EAAD,CACCC,KAAK,QACLtF,QAAQ,YACRD,MAAM,YACNwF,SAAUJ,EAAYK,GAAG9E,IACzB+E,QAAS,kBAAMjD,EAAe0C,KAL/B,gBAcAzF,UFnBwBwC,EEmBJkD,GFjBpBlD,EAAIyD,IAAI/E,uBAAa,sBAAsBuB,SAAS,IAAM,KACzDC,QAAQ,GEgB0B,UDiGhCwD,CAAW,CAAET,eAAgB7C,EAAM6C,eAAgB1C,oBAGrD,kBAAC8B,GAAA,EAAD,CAAMC,MAAI,EAACU,GAAI,EAAGT,GAAI,GACpBjF,GAAU,CACVI,OAAQ0C,EAAM1C,OACdH,MAAO,mBACPE,MAAOkE,EAAMvB,EAAMuD,YACnBnG,SAAUuC,GAAUK,EAAMuD,YAAc,UAI1C,kBAACtB,GAAA,EAAD,CAAMC,MAAI,EAACU,GAAI,EAAGT,GAAI,GACpBjF,GAAU,CACVI,OAAQ0C,EAAM1C,OACdH,MAAO,0BACPE,MAAOkE,EAAMnB,GACbhD,SAAUuC,GAAUS,GAAkB,UAIxC,kBAAC6B,GAAA,EAAD,CAAMC,MAAI,EAACU,GAAI,EAAGT,GAAI,GACpBjF,GAAU,CACVI,OAAQ0C,EAAM1C,OACdH,MAAO,eACPC,SAAU4C,EAAMwD,YACb7D,GAAUK,EAAMwD,aAAe,OAC/B,GACHnG,MAAOkE,EAAMvB,EAAMwD,gBAIrB,kBAACC,GAAA,EAAD,CAAgBtB,GAAI,IACnB,kBAACuB,GAAA,EAAD,CACCC,aAAW,cACX7F,MAAO,CAAEsE,UAAWtF,EAASkB,QAAQ,KAErC,kBAAC4F,GAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAWhG,MAAO0E,GAAlB,eACA,kBAACsB,EAAA,EAAD,CAAWhG,MAAO0E,EAAiBuB,MAAM,SAAzC,qBAGA,kBAACD,EAAA,EAAD,CAAWhG,MAAO0E,EAAiBuB,MAAM,SAAzC,QAGA,kBAACD,EAAA,EAAD,CAAWhG,MAAO0E,EAAiBuB,MAAM,SAAzC,UAGA,kBAACD,EAAA,EAAD,CAAWhG,MAAO0E,EAAiBuB,MAAM,SAAzC,aAKF,kBAACC,GAAA,EAAD,KACE,YAAKhE,EAAMK,WAAa,IAAK4D,UAAUzD,KAxHvB,SAAA0D,GACrB,IAAMC,EAAOjF,GAAQgF,EAAK1F,QACpB4F,EAAYD,EAAOA,EAAKxF,MAAQuF,EAAK1F,OAC3C,OACC,kBAACqF,EAAA,EAAD,CAAUQ,IAAKhF,GAAU6E,IACxB,kBAACJ,EAAA,EAAD,KAAYnE,GAAUuE,EAAKI,eAA3B,QACA,kBAACR,EAAA,EAAD,CAAWC,MAAM,SAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAASK,GAC1B,kBAACN,EAAA,EAAD,CAAWC,MAAM,SAtBD,SAAAG,GAClB,GAAoB,oBAAhBA,EAAK3D,OAA8B,CACtC,IAAMgE,EAAaL,EAAKK,WAAWC,UAC7BC,EAAMC,KAAKD,MACjB,GAAIF,EAAaE,EAAK,CACrB,IAAME,EAAOC,KAAKC,MAAMN,EAAaE,GAAO,OAC5C,MAAM,iBAAN,OAAwBE,EAAxB,SAEA,MAAO,aAGT,OAAOT,EAAK3D,OAWgBuE,CAAWZ,IACrC,kBAACJ,EAAA,EAAD,CAAWC,MAAM,SACC,WAAhBG,EAAK3D,OACL,kBAACyC,GAAA,EAAD,CAAQtF,MAAM,UAAU0F,QAAS,kBAAMnD,EAAgBiE,KAAvD,kBAIA,kBAAClB,GAAA,EAAD,CACCE,SAAUgB,EAAKK,WAAWC,UAAYE,KAAKD,MAC3CrB,QAAS,kBAAMlD,EAASgE,IACxBxG,MAAM,aAHP,kBA8GFqE,G,gEEvKW,SAASgD,GAAT,GAAuD,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,MAAS,EAC5CrE,mBAAStC,IADmC,mBAC7D2F,EAD6D,KACvDiB,EADuD,OAE1BtE,mBAAS,GAFiB,mBAE7DuE,EAF6D,KAE9CC,EAF8C,OAGlCxE,oBAAS,GAHyB,mBAG7DyE,EAH6D,KAGlDC,EAHkD,OAI1B1E,mBAAS,IAJiB,mBAI7D2E,EAJ6D,KAI9CC,EAJ8C,OAK5B5E,oBAAS,GALmB,mBAK7D6E,EAL6D,KAK/CC,EAL+C,OAM5C9E,mBAAS,IANmC,mBAM7DsD,EAN6D,KAMvDyB,EANuD,KAO9DC,EAAgB,CAAEC,SAAU,SAC5BC,EAAa7G,GAAQiF,GAOrB6B,EAQL,qCAEKC,EACL,wFJ5CyB,GI4CzB,uCAGC,uBAAGC,KAAK,gCAAgCC,OAAO,UAA/C,wBAGCH,EANF,KAUKI,EAAiB,SAAAC,GAAW,IACzBC,EAA6BD,EAA7BC,SAAUC,EAAmBF,EAAnBE,eACZC,EAAqBD,EACxBjI,uBJ1DyB,II0DZiI,EAAezH,kBAC5BT,GAEH,OAAIiI,EAASG,GAAGzB,IACfO,GAAa,QACbE,EAAiB,6BAGdc,GAAkBD,EAASI,GAAGF,IACjCjB,GAAa,QACbE,EACC,kEAIFF,GAAa,IAwBd,OACC,kBAAC3H,GAAA,EAAD,CACCC,UAAW,EACXC,MAAO,CAAE6I,MAAO,QAAS1I,QAASnB,EAASkB,QAAQ,EAAG,EAAG,KAEzD,6CACA,kBAACiE,GAAA,EAAD,CAAMS,WAAS,EAAC1E,QAAS,GACxB,kBAACiE,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACd,kBAACyE,GAAA,EAAD,CACCC,UAAQ,EACRlI,MAAM,aACNmI,KAAK,SACLhJ,MAAO+H,EACPkB,MAAO3B,EACPhK,MAAOkK,EACP0B,SAAU,SAAAC,GAAE,OAnCW,SAAAF,GAE3B,IAAMtI,EAASsI,EAAQ,EAAI,EAAIA,EACzBT,EAAWhI,uBAAasG,KAAKsC,MJhFP,IIgFazI,IACzC2H,EAAe,CAAEE,WAAUC,eAAgBR,IAC3CV,EAAiB5G,GACjB0G,EAAQ,eACJjB,EADG,CAENzF,OAAQ6H,KA2BWa,CAAoBF,EAAGd,OAAOY,QAC9CK,WAAY9B,EAAYE,EAAgB,OAEzC,kBAAC/H,GAAA,EAAD,CAAYE,QAAQ,aAApB,cAEC,kBAACqF,GAAA,EAAD,CACCI,QAAS,SAAA6D,GACR5B,GACEL,EAAUnF,WJxHU,KIwHmBC,QAAQ,IAEjDqF,EAAQ,eAAKjB,EAAN,CAAYzF,OAAQuG,OAG3BrF,GAAUqF,GARZ,UAYF,kBAAC/C,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACd,kBAACkF,GAAA,EAAD,CAAaR,UAAQ,GACpB,kBAACS,GAAA,EAAD,aACA,kBAACC,GAAA,EAAD,CACCzJ,MAAO+H,EACPkB,MAAO5C,EACP6C,SAAU,SAAAC,GAAE,OA9CC,SAAAF,GAClB,IAAMT,EAAWhI,uBAAasG,KAAKsC,MJ1FP,II0Fa9B,IACnCmB,EAAiBrH,GAAQ6H,GAC/BX,EAAe,CAAEE,WAAUC,mBAC3BX,EAAQmB,GACR5B,EAAQ,eAAKjB,EAAN,CAAY1F,OAAQuI,KAyCNS,CAAWP,EAAGd,OAAOY,SAErC,kBAACU,EAAA,EAAD,CAAUV,MAAO,IAChB,qCAEA7B,EAAM1E,KAAI,gBAAG7B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,kBAAC6I,EAAA,EAAD,CAAUpD,IAAKzF,EAAImI,MAAOnI,GACxBD,SAMLoH,EACA,kBAAC9D,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACd,kBAACF,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACd,kBAAC1E,GAAA,EAAD,CAAYE,QAAQ,MAApB,uBACA,kBAACF,GAAA,EAAD,CAAYE,QAAQ,SAASoI,EAAWhH,eAEzC,kBAACkD,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIrE,MAAO,CAAEsE,UAAWtF,EAASkB,QAAQ,KACvD,kBAACP,GAAA,EAAD,CAAYE,QAAQ,MAApB,yBACA,kBAACF,GAAA,EAAD,CAAYE,QAAQ,SAASoI,EAAW/G,eAI1C,GAED,kBAACiD,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACd,kBAACuF,GAAA,EAAD,CACC5J,MAAO,CAAE6J,WAAY,QACrBhJ,MAAOsH,EACP2B,QACC,kBAACC,GAAA,EAAD,CACCC,QAASpC,EACTsB,SAAU,SAAAC,GAAE,OAAItB,EAAgBsB,EAAGd,OAAO2B,eAK9C,kBAAC7F,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACd,kBAACkF,GAAA,EAAD,CAAavJ,MAAO,CAAE8D,QAAS,SAC9B,kBAACoB,GAAA,EAAD,CACCE,WAEEgB,EAAK1F,QACLkH,GACAxB,EAAKzF,OAAOgI,GAAGpI,MACdiH,GAGH5H,MAAM,UACNC,QAAQ,YACRyF,QA9JW,WAChBuC,GAAgB,GAChBV,EAAUf,KAiJN,iB,4CC3JN,IAAM6D,GAAY,6CACZC,GAAW,6CAGXC,GAAWC,+BACXC,GAAU,IAAIC,WAAShK,GAAciK,EAAYJ,IACjDK,GAAQ,IAAIF,WAASJ,GAAUO,EAAUN,IACzCO,GAAO,IAAIJ,WAASL,GAAWU,EAASR,IAExCS,GAAYpK,uBAAa,uBAEzBqK,GAAc,CACnBrL,QAAQ,EACR+C,UAAW,GACXmD,YAAanF,GACbkF,WAAYlF,IAGb,SAASuK,GAAMC,GACd,OAAO,kBAAC,IAAD,eAAUhL,UAAW,EAAGF,QAAQ,UAAakL,IA4IrD,SAAeC,KAAf,iBAAApI,EAAAqI,OAAA,mDACgC,qBAApBC,OAAOC,SADnB,kCAAAvI,EAAA,MAEQsI,OAAOC,SAASC,UAFxB,UAKMF,OAAOG,KALb,yCAK0B,MAL1B,cAOOlB,EAAW,IAAImB,eAAaJ,OAAOG,KAAKE,iBACxCC,EAASrB,EAASa,YARzB,kBASQQ,GATR,qCAqBA,SAAeC,KAAf,yBAAA7I,EAAAqI,OAAA,kEAAArI,EAAA,MACsBoI,MADtB,UACOQ,EADP,gDAGS,CACNhM,QAAQ,EACR+C,UAAW,GACXmD,YAAanF,GACbwE,eAAgB,KAPnB,yBAAAnC,EAAA,MASoB4I,EAAOE,cAT3B,cASOC,EATP,mBAAA/I,EAAA,MAW2CgJ,QAAQC,IAAI,CACrDC,GAAcH,GACdI,GAAWJ,MAbb,2CAWQK,EAXR,KAWmBjH,EAXnB,sCAeaiH,EAfb,CAewBxM,QAAQ,EAAMuF,oBAftC,sCAkBA,SAAe+G,GAAcH,GAA7B,2BAAA/I,EAAAqI,OAAA,kEAAArI,EAAA,MAC8CgJ,QAAQC,IAAI,CACxDrB,GAAMyB,UAAUN,GAChBxB,GAAS+B,QAAQ,CAChBC,UAAW,EACXC,QAAS9L,GACT+L,OAAQ,CAAC,KAAMC,qBAAWX,EAAM,OAEjCxB,GAAS+B,QAAT,aAAmBC,UAAW,GAAM9B,GAAQkC,QAAQC,SAAS,KAAM,WARrE,0CACQ9G,EADR,KACqB+G,EADrB,KAC2BC,EAD3B,KAWOC,EAAgBD,EAAU/J,QAAO,SAACyE,EAAOwF,GAAS,IAAD,EACtBvC,GAAQwC,UAAUC,SAASF,GAAKG,OAAxDrM,EAD8C,EAC9CA,OAAQsM,EADsC,EACtCA,YAEhB,OADA5F,EAAM1G,GAAUsM,EACT5F,IACL,IAEG7E,EAAYkK,EAAK9J,QAAO,SAACsK,EAAOL,GACrC,IAAMM,EAAQN,EAAIP,OAAO,GACnBc,EAAM9C,GAAQwC,UAAUO,OAC9B,GAAIF,IAAUC,EAAIE,QAAQH,MAAO,CAChC,IAAMI,EAAOjD,GAAQwC,UAAUC,SAASF,GAAKG,OACrCvL,EAAiD8L,EAAjD9L,MAAOb,EAA0C2M,EAA1C3M,OAAQD,EAAkC4M,EAAlC5M,OAAQe,EAA0B6L,EAA1B7L,MAAO8L,EAAmBD,EAAnBC,eAChCnH,EAAO,CAAE5E,QAAOb,SAAQD,SAAQe,QAAO8L,kBAC7CN,EAAMO,KAAN,aACC1M,GAAIS,GAAU6E,GACd3D,OAAQ,SACR+D,cAAeJ,EAAKzF,OAClB8M,IAAI7C,GAAU8C,IAAIf,EAAcjM,IAAWH,KAC3CgF,IAAIqF,GAAU8C,IAAIH,KACjBnH,SAEE,GAAI8G,IAAUC,EAAIQ,mBAAmBT,MAAO,OAEnB7C,GAAQwC,UAAUC,SAASF,GAAKG,OAAvDa,EAF0C,EAE1CA,OAAQnH,EAFkC,EAElCA,WACVL,EAAO6G,EAAM5L,MAAK,qBAAGP,KAAgB8M,KAC3CxH,EAAK3D,OAAS,kBACd2D,EAAKK,WAAa,IAAIG,KAAkB,IAAbH,QACrB,GAAIyG,IAAUC,EAAIU,YAAYX,MAAO,CAAC,IACpCU,EAAWvD,GAAQwC,UAAUC,SAASF,GAAKG,OAA3Ca,OACRX,EAAM5L,MAAK,qBAAGP,KAAgB8M,KAAQnL,OAAS,WAEhD,OAAOwK,IACL,IA3CJ,kBA6CQ,CAAE1K,YAAWmD,gBA7CrB,sCAgDA,SAAeqG,GAAWJ,GAA1B,uBAAA/I,EAAAqI,OAAA,uDACO6C,EAAalN,GAAM,GAD1B,WAAAgC,EAAA,MAEoBO,MAAM,GAAD,OAAI2K,EAAW3M,IAAf,kBAFzB,cAEO4M,EAFP,kBAAAnL,EAAA,MAG8BmL,EAAKzK,QAHnC,cAGOyB,EAHP,OAIOiJ,EAAalH,KAAKsC,MAAMxC,KAAKD,MAAQ,KAJ5C,YAAA/D,EAAA,MAKuBgJ,QAAQC,IAC7B9G,EAAerC,KAAI,SAAMuL,GAAN,iBAAArL,EAAAqI,OAAA,qDACdgD,EAAcC,YAAYF,WAAaA,GADzB,yCAC4C,MAD5C,UAEbC,EAAcE,SAASxC,GAFV,yCAEwB,MAFxB,cAGZyC,EAAc,IAAIC,IAAYJ,EAAcE,UAHhC,KAIQ3N,uBAAayN,EAAcE,SAASxC,IAJ5C,WAAA/I,EAAA,MAKX8H,GAAK4D,iBAAiBL,EAAcM,UAAW5C,IALpC,0BAIZ1G,EAJY,KAImDyI,IAJnD,iDAQdO,EARc,CASjBhJ,oBACAuJ,MAAOJ,EAAYK,SAAS9C,GAC5B+C,UAAWN,EAAYO,MAAMC,UAC7BjO,OAAQsN,EAAcE,SAASxC,MAZd,2CANrB,eAKOkD,EALP,yBAsBQA,EAAQrM,QAAO,SAAAlB,GAAC,OAAIA,MAtB5B,sCAyBA,SAAewN,GAAc5M,EAA7B,gCAAAU,EAAAqI,OAAA,mDAAsCtK,EAAtC,EAAsCA,OAAQD,EAA9C,EAA8CA,OAAQe,EAAtD,EAAsDA,MAChDf,EADN,oDAEMwB,EAAMwD,YAFZ,qDAGK/E,EAAOgI,GAAGzG,EAAMwD,aAHrB,mEAAA9C,EAAA,MAIsBoI,MAJtB,UAIOQ,EAJP,iEAMOuD,EAAoB,IAAIzE,WAAShK,GAAciK,EAAYiB,GAC3DwD,EAAkB,IAAI1E,WAASJ,GAAUO,EAAUe,GAP1D,OAAA5I,EAAA,KAQyBoM,EARzB,YAAApM,EAAA,MASQ4I,EAAOE,cATf,gCAUEpL,GAVF,UAQyC2O,UARzC,qEAQOA,EARP,OAYKC,EAAO,GAGND,EAAU5J,GAAG1E,GAfnB,qBAgBMsO,EAAUtG,GAAGpI,IAhBnB,6BAiBG2O,EAjBH,YAAAtM,EAAA,MAkBUoM,EAAgBG,QAAQ7O,GAAcC,GAAM,CAAE6O,SAAU,OAlBlE,yBAiBQ5B,KAjBR,oCAqBE0B,EArBF,YAAAtM,EAAA,MAsBSoM,EAAgBG,QAAQ7O,GAAcK,EAAQ,CACnDyO,SAAU,OAvBd,yBAqBO5B,KArBP,oCA2BC0B,EA3BD,YAAAtM,EAAA,MA4BQmM,EAAkBM,QAAQ,CAAC1O,EAAQD,EAAQe,GAASlB,IAAO,CAChE6O,SAAU,QA7Bb,iCA2BM5B,KA3BN,6BAAA5K,EAAA,MAiCOgJ,QAAQC,IAAIqD,EAAKxM,KAAI,SAAA4M,GAAE,OAAIA,EAAGC,YAjCrC,sCAoCA,SAAeC,GAAazK,GAA5B,mCAAAnC,EAAAqI,OAAA,kEAAArI,EAAA,MACsBoI,MADtB,UACOQ,EADP,wDAGOiE,EAAiB,IAAInF,WAASL,GAAWU,EAASa,GACpD0D,EAAO,GAJZ,+BAK6BnK,EAL7B,0EAKYkJ,EALZ,QAMQyB,EAAOzB,EAAcC,YACrByB,EAAe,CACpBD,EAAKE,QACLF,EAAKG,UACLH,EAAKI,YACLJ,EAAK1B,WACL0B,EAAKK,WACLL,EAAKM,MAbR,KAeEd,EAfF,YAAAtM,EAAA,MAgBS6M,EAAeQ,gBACpBN,EACA1B,EAAcS,UACdT,EAAciC,WACdjC,EAAcO,MACdP,EAActN,SArBlB,yBAeO6M,KAfP,wTAyBQ5B,QAAQC,IAAIqD,EAAKxM,KAAI,SAAA4M,GAAE,OAAIA,EAAGC,YAzBtC,4EClUoBY,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBF2CD,WAAgB,IAAD,EACWzN,oBAAS,GADpB,mBACtB0N,EADsB,KACPC,EADO,OAEGC,IAAM5N,SAAS,MAFlB,mBAEtB6N,EAFsB,KAEZC,EAFY,OAGC9N,oBAAS,GAHV,mBAGtB+N,EAHsB,KAGbC,EAHa,OAIShO,mBACrC,qCAL4B,mBAItBiO,EAJsB,KAITC,EAJS,OAOHlO,mBAAS8H,IAPN,mBAOtB3I,EAPsB,KAOfgP,EAPe,KASvBC,EAAe,kBA4ItB,gCAAAvO,EAAAqI,OAAA,kEAAArI,EAAA,MACuCgJ,QAAQC,IAAI,CACjDrB,GAAMyB,UAAU3L,IAChBmL,QAHF,0CACQhG,EADR,KACoB2L,EADpB,oCAMU3L,cAAe2L,IANzB,qCA3IEC,GACEjO,KAAK8N,GACL3N,OAAM,SAAA+N,GACN9N,QAAQlG,MAAM,YAAagU,GAC3BP,GAAW,GACI,OAAXO,EAAEC,MACLN,EAAe,yCAGnB/N,qBAAU,WACTiO,IACA,IAAMK,EAAQC,YAAYN,EAzCN,KA0CpB,OAAO,kBAAMO,cAAcF,MACzB,IAIH,IAAMG,EAAe,SAAAC,GAAQ,OAAI,uCAAAhP,EAAAqI,OAAA,uDAAStK,EAAT,EAASA,OAAQD,EAAjB,EAAiBA,OAAQe,EAAzB,EAAyBA,MAAzB,WAAAmB,EAAA,MACXoI,MADW,UAC1BQ,EAD0B,+DAG1BqG,EAAU,IAAIvH,WAAShK,GAAciK,EAAYiB,GACjDsG,EAAKF,EACRC,EAAQE,OAAOC,KAAKH,GACpBA,EAAQI,cAAcD,KAAKH,GANE,qBAAAjP,EAAA,MASdkP,EAAG,CAACnR,EAAQD,EAAQe,GAASlB,MATf,eASzB+O,EATyB,mBAAA1M,EAAA,MAUzB0M,EAAGC,QAVsB,0DAY/BwB,GAAW,GACXE,EAAe,KAAExM,SAAW,iBAbG,2DAgB3BtC,EAAkBwP,GAAa,GAC/BvP,EAAWuP,GAAa,GACxBO,EAAc,SAACC,EAAOC,GACZ,cAAXA,GAGJrB,GAAW,IAsBZ,OACC,kBAAC,IAAD,CAAkBhT,MAAOiB,GACxB,kBAACqT,EAAA,EAAD,CAAQC,SAAS,UAChB,kBAACC,EAAA,EAAD,KACC,yBAAKC,OAAO,OAAOC,IAAKC,IAAMC,IAAI,SAClC,kBAACC,EAAA,EAAD,CACCxN,UAAWlD,EAAM1C,OACjB8F,QAAS,kBAAMoL,GAAe,IAC9B7Q,QAAQ,WACRD,MAAM,YACNI,MAAO,CAAEsS,SAAU,WAAYO,MAAO,KAAMC,IAAK,QAEjD,kBAAC,IAAD,CAAS9S,MAAO,CAAEC,OAAQjB,EAASkB,QAAQ,MAP5C,kBGvHU,WAAO,IAAD,EACQ6C,mBAAS,MADjB,mBACbgQ,EADa,KACLC,EADK,KAKdC,EAAgB,WACrBD,EAAU,OAEX,OACC,oCACC,kBAACE,EAAA,EAAD,CACClT,MAAO,CAAEsS,SAAU,WAAYO,MAAO,QAASC,IAAK,OACpDxN,QAVkB,SAAA6D,GACpB6J,EAAU7J,EAAGgK,iBAWX,kBAAC,IAAD,CAAUnT,MAAO,CAAE7B,SAAU,QAASyB,MAAO,YAE9C,kBAACwT,EAAA,EAAD,CACCtS,GAAG,cACHuS,SAAUN,EACVO,KAAMnD,QAAQ4C,GACdQ,aAAW,EACXC,QAASP,EACTQ,mBAAoB,KACpBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,WAEhD,kBAACE,EAAA,EAAD,CAAM1L,KAAK,+BAA+BC,OAAO,UAChD,kBAACsB,EAAA,EAAD,CAAUrE,QAAS2N,GAAnB,qBAED,kBAACa,EAAA,EAAD,CACC1L,KAAK,qDACLC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUrE,QAAS2N,GAAnB,eAED,kBAACa,EAAA,EAAD,CACC1L,KAAK,mDACLC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUrE,QAAS2N,GAAnB,gBAED,kBAACa,EAAA,EAAD,CACC1L,KAAK,wDACLC,OAAO,UAEP,kBAACsB,EAAA,EAAD,CAAUrE,QAAS2N,GAAnB,uBHoFCc,KAKH9R,GAAU,CACTC,QACAC,gBAAiB0O,EACjBzO,WACAC,eAjCoB,SAAM0C,GAAN,SAAAnC,EAAAqI,OAAA,2EAAArI,EAAA,MAEf4M,GAAazK,IAFE,sDAIrBgM,GAAW,GACXE,EAAe,KAAExM,SAAW,iBALP,0DIpGT,YAIX,IAHHmM,EAGE,EAHFA,SACAoD,EAEE,EAFFA,OACAC,EACE,EADFA,UAEA,OACC,kBAACC,GAAA,EAAD,CAAQZ,OAAQ1C,EAAU4C,QAASQ,GAClC,kBAACG,GAAA,EAAD,CAAarT,GAAG,sBAAhB,iBACA,kBAACsT,GAAA,EAAD,qDAC+C,IAC7CvS,GAAU+O,EAAWA,EAASpK,cAAgBjG,IAFhD,QAGC,6BACA,6BAJD,mBAMC,4BACC,4CTnBsB,GSmBtB,uDAIA,2FAC8D,ITxBxC,GSuBtB,kBAMF,kBAAC8T,GAAA,EAAD,KACC,kBAACnP,GAAA,EAAD,CAAQI,QAAS0O,EAAQM,WAAS,EAAC1U,MAAM,WAAzC,UAGA,kBAACsF,GAAA,EAAD,CAAQI,QAAS2O,EAAWrU,MAAM,WAAlC,YJ2GA2U,CAAyB,CACzB3D,WACAoD,OAAQ,kBAAMnD,EAAY,OAC1BoD,UAAW,WACNrD,GAAUzO,EAAgByO,GAC9BC,EAAY,SAGd,kBAAC2D,EAAA,EAAD,CAAUlB,KAAMxC,EAAS2D,iBAAkB,IAAMjB,QAAStB,GACzD,kBAAC,GAAD,CAAOsB,QAAStB,EAAawC,SAAS,SACpC1D,IAGH,kBAAC2D,EAAA,EAAD,CACCrB,KAAM7C,EACN+C,QAAS,kBAAM9C,GAAe,IAC9B1Q,MAAO,CACN8D,QAAS,OACTC,WAAY,SACZ6Q,eAAgB,UAEjBC,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACdC,QAAS,MAGV,kBAACC,EAAA,EAAD,CAAMC,GAAI1E,GACRxJ,GAAY,CACZG,MAAOxG,GAAM4B,QAAO,SAAAlB,GAAC,OAAIA,EAAEP,cAC3BmG,UAAWhF,EAAMwD,YACjByB,UA7EgB,SAAMf,GAAN,SAAAxD,EAAAqI,OAAA,uDACpByF,GAAe,GADK,oBAAA9N,EAAA,MAGbkM,GAAc5M,EAAOkE,IAHR,uDAKnB2K,GAAW,GACXE,EAAe,KAAExM,SAAW,iBANT,gEE/FN,MAAS2Q,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpS,MAAK,SAAAqS,GACjCA,EAAaC,kB","file":"static/js/main.2d806ebc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/adex-staking.bf64bad2.svg\";","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\"\nimport lime from \"@material-ui/core/colors/lime\"\nimport deepOrange from \"@material-ui/core/colors/deepOrange\"\nimport amber from \"@material-ui/core/colors/amber\"\nimport grey from \"@material-ui/core/colors/grey\"\n\nconst WHITE = \"#fff\"\nexport const PRIMARY = \"#1B75BC\"\nexport const SECONDARY = \"#FFAC00\"\nexport const ALEX_GREY = \"#3f3e3e\"\nexport const ACCENT_ONE = \"#57467B\"\nexport const ACCENT_TWO = \"#7CB4B8\"\n\nconst palette = {\n\tprimary: { main: PRIMARY, contrastText: WHITE },\n\t//secondary: { main: SECONDARY, contrastText: WHITE },\n\taccentOne: { main: ACCENT_ONE, contrastText: WHITE },\n\taccentTwo: { main: ACCENT_TWO, contrastText: WHITE },\n\tgrey: { main: ALEX_GREY, contrastText: WHITE },\n\terror: deepOrange,\n\twarning: amber,\n\tfirst: lime,\n\tcontrastThreshold: 3,\n\ttonalOffset: 0.2,\n\ttext: grey\n}\n\nconst theme = createMuiTheme({\n\ttypography: {\n\t\tfontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n\t\tfontSize: 13\n\t},\n\tpalette: { ...palette },\n\toverrides: {\n\t\tMuiButton: {\n\t\t\troot: {\n\t\t\t\tborderRadius: 0\n\t\t\t},\n\t\t\toutlined: {\n\t\t\t\tborderRadius: 0\n\t\t\t}\n\t\t},\n\t\tMuiTableCell: {\n\t\t\thead: {\n\t\t\t\twhiteSpace: \"nowrap\"\n\t\t\t},\n\t\t\troot: {\n\t\t\t\twhiteSpace: \"nowrap\"\n\t\t\t}\n\t\t},\n\t\tMuiPaper: {\n\t\t\trounded: {\n\t\t\t\tborderRadius: 0\n\t\t\t}\n\t\t},\n\t\tMuiTooltip: {\n\t\t\ttooltip: { borderRadius: 0 }\n\t\t}\n\t}\n})\n\nexport const themeMUI = responsiveFontSizes(theme, {\n\toptions: [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n\tfactor: 3\n})\n","import React from \"react\"\nimport Paper from \"@material-ui/core/Paper\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { themeMUI } from \"../themeMUi\"\n\nexport default function StatsCard({ title, subtitle, extra, loaded, actions }) {\n\tconst extraElem =\n\t\ttypeof extra === \"string\" ? (\n\t\t\t<Typography color=\"primary\" variant=\"h6\">\n\t\t\t\t{extra}\n\t\t\t</Typography>\n\t\t) : (\n\t\t\textra || <></>\n\t\t)\n\treturn (\n\t\t<Paper elevation={3} style={{ margin: themeMUI.spacing(1) }}>\n\t\t\t<div style={{ padding: themeMUI.spacing(2), minHeight: \"75px\" }}>\n\t\t\t\t<Typography variant=\"h5\">{subtitle}</Typography>\n\t\t\t\t{extraElem}\n\t\t\t\t<Typography color=\"textSecondary\" variant=\"subtitle2\">\n\t\t\t\t\t{title}\n\t\t\t\t</Typography>\n\t\t\t\t{actions || <></>}\n\t\t\t</div>\n\t\t\t{!loaded ? <LinearProgress /> : <></>}\n\t\t</Paper>\n\t)\n}\n","import { bigNumberify, id } from \"ethers/utils\"\n\nexport const ADDR_STAKING = \"0x46ad2d37ceaee1e82b70b867e674b903a4b4ca32\"\nexport const ZERO = bigNumberify(0)\nexport const PRICES_API_URL =\n\t\"https://min-api.cryptocompare.com/data/price?fsym=ADX&tsyms=BTC,USD,EUR\"\nexport const ADX_MULTIPLIER = 10000\nexport const UNBOND_DAYS = 30\nexport const STAKING_RULES_URL = null\n\nexport const DEFAULT_BOND = {\n\tpoolId: \"\",\n\tamount: ZERO\n}\n\nexport const POOLS = [\n\t{\n\t\tlabel: \"Validator Tom\",\n\t\tid: id(\"validator:0x2892f6C41E0718eeeDd49D98D648C789668cA67d\"),\n\t\tselectable: true,\n\t\tminStakingAmount: 0,\n\t\trewardPolicy:\n\t\t\t'The \"Validator Tom\" pool will distribute its fee earnings proportionally to each staker. The fee earnings will be 7% of the total volume, which you can track on our Explorer. The APY percentage is calculated as follows: 100*(0.07 * annualVolumeInUSD / totalStakedInPoolInUSD)',\n\t\tslashPolicy: \"No slashing.\",\n\t\turl: \"https://tom.adex.network\"\n\t},\n\t{\n\t\tlabel: \"Validator Jerry\",\n\t\tid: id(\"validator:0xce07CbB7e054514D590a0262C93070D838bFBA2e\"),\n\t\tselectable: false,\n\t\tminStakingAmount: 0,\n\t\trewardPolicy: \"\",\n\t\tslashPolicy: \"\"\n\t}\n]\n","import { POOLS, ADDR_STAKING, ADX_MULTIPLIER } from \"./constants\"\nimport { keccak256, defaultAbiCoder, bigNumberify } from \"ethers/utils\"\n\nexport const getPool = poolId => POOLS.find(x => x.id === poolId)\nexport function getBondId({ owner, amount, poolId, nonce }) {\n\treturn keccak256(\n\t\tdefaultAbiCoder.encode(\n\t\t\t[\"address\", \"address\", \"uint\", \"bytes32\", \"uint\"],\n\t\t\t[ADDR_STAKING, owner, amount, poolId, nonce]\n\t\t)\n\t)\n}\nexport function formatADX(num) {\n\treturn (num.toNumber(10) / ADX_MULTIPLIER).toFixed(4)\n}\n\nexport function formatDAI(num) {\n\treturn (\n\t\tnum.div(bigNumberify(\"10000000000000000\")).toNumber(10) / 100\n\t).toFixed(2)\n}\n","import React, { useState, useEffect } from \"react\"\nimport {\n\tTableRow,\n\tTableCell,\n\tButton,\n\tGrid,\n\tSnackbarContent,\n\tTable,\n\tTableContainer,\n\tTableHead,\n\tTableBody\n} from \"@material-ui/core\"\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport { themeMUI } from \"../themeMUi\"\nimport RewardCard from \"./RewardCard\"\nimport StatsCard from \"./StatsCard\"\nimport {\n\tADX_MULTIPLIER,\n\tUNBOND_DAYS,\n\tZERO,\n\tPRICES_API_URL\n} from \"../helpers/constants\"\nimport { getPool, getBondId, formatADX } from \"../helpers/utils\"\n\nexport default function Dashboard({\n\tstats,\n\tonRequestUnbond,\n\tonUnbond,\n\tonClaimRewards\n}) {\n\tconst userTotalStake = stats.userBonds\n\t\t.filter(x => x.status === \"Active\")\n\t\t.map(x => x.amount)\n\t\t.reduce((a, b) => a.add(b), ZERO)\n\n\t// USD values\n\tconst [prices, setPrices] = useState({})\n\tconst refreshPrices = () =>\n\t\tfetch(PRICES_API_URL)\n\t\t\t.then(r => r.json())\n\t\t\t.then(setPrices)\n\t\t\t.catch(console.error)\n\tuseEffect(() => {\n\t\trefreshPrices()\n\t}, [])\n\tconst inUSD = adxAmount => {\n\t\tif (!adxAmount) return null\n\t\tif (!prices.USD) return null\n\t\tconst usdAmount = (adxAmount.toNumber(10) / ADX_MULTIPLIER) * prices.USD\n\t\treturn `${usdAmount.toFixed(2)} USD`\n\t}\n\n\t// Render all stats cards + bond table\n\tconst bondStatus = bond => {\n\t\tif (bond.status === \"UnbondRequested\") {\n\t\t\tconst willUnlock = bond.willUnlock.getTime()\n\t\t\tconst now = Date.now()\n\t\t\tif (willUnlock > now) {\n\t\t\t\tconst days = Math.ceil((willUnlock - now) / 86400000)\n\t\t\t\treturn `Can unbond in ${days} days`\n\t\t\t} else {\n\t\t\t\treturn \"Can unbond\"\n\t\t\t}\n\t\t}\n\t\treturn bond.status\n\t}\n\n\tconst renderBondRow = bond => {\n\t\tconst pool = getPool(bond.poolId)\n\t\tconst poolLabel = pool ? pool.label : bond.poolId\n\t\treturn (\n\t\t\t<TableRow key={getBondId(bond)}>\n\t\t\t\t<TableCell>{formatADX(bond.currentAmount)} ADX</TableCell>\n\t\t\t\t<TableCell align=\"right\">0.00 DAI</TableCell>\n\t\t\t\t<TableCell align=\"right\">{poolLabel}</TableCell>\n\t\t\t\t<TableCell align=\"right\">{bondStatus(bond)}</TableCell>\n\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t{bond.status === \"Active\" ? (\n\t\t\t\t\t\t<Button color=\"primary\" onClick={() => onRequestUnbond(bond)}>\n\t\t\t\t\t\t\tRequest Unbond\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={bond.willUnlock.getTime() > Date.now()}\n\t\t\t\t\t\t\tonClick={() => onUnbond(bond)}\n\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUnbond\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t)\n\t}\n\n\tconst bondExplanationMsg = (\n\t\t<div style={{ display: \"flex\", alignItems: \"center\" }}>\n\t\t\t<InfoIcon style={{ marginRight: themeMUI.spacing(2) }} />\n\t\t\t<p>\n\t\t\t\tThis table will show all your individual ADX deposits (bonds), along\n\t\t\t\twith information as status, amount and earned reward. By using the\n\t\t\t\taction buttons, you will be able to request unbonding and withdraw your\n\t\t\t\tADX after the {UNBOND_DAYS} day lock-up period.\n\t\t\t</p>\n\t\t</div>\n\t)\n\tconst bondExplanationFrag =\n\t\t!stats.loaded || stats.userBonds.length ? (\n\t\t\t<></>\n\t\t) : (\n\t\t\t<Grid item xs={12} style={{ marginTop: themeMUI.spacing(2) }}>\n\t\t\t\t<SnackbarContent\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tfontSize: \"15px\",\n\t\t\t\t\t\tbackgroundColor: themeMUI.palette.primary.main\n\t\t\t\t\t}}\n\t\t\t\t\tmessage={bondExplanationMsg}\n\t\t\t\t></SnackbarContent>\n\t\t\t</Grid>\n\t\t)\n\n\tconst headerCellStyle = { fontWeight: \"bold\" }\n\treturn (\n\t\t<Grid\n\t\t\tcontainer\n\t\t\tstyle={{\n\t\t\t\tpadding: themeMUI.spacing(4),\n\t\t\t\tmaxWidth: \"1200px\",\n\t\t\t\tmargin: \"auto\"\n\t\t\t}}\n\t\t>\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{RewardCard({ rewardChannels: stats.rewardChannels, onClaimRewards })}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Total ADX staked\",\n\t\t\t\t\textra: inUSD(stats.totalStake),\n\t\t\t\t\tsubtitle: formatADX(stats.totalStake) + \" ADX\"\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Your total active stake\",\n\t\t\t\t\textra: inUSD(userTotalStake),\n\t\t\t\t\tsubtitle: formatADX(userTotalStake) + \" ADX\"\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<Grid item sm={3} xs={6}>\n\t\t\t\t{StatsCard({\n\t\t\t\t\tloaded: stats.loaded,\n\t\t\t\t\ttitle: \"Your balance\",\n\t\t\t\t\tsubtitle: stats.userBalance\n\t\t\t\t\t\t? formatADX(stats.userBalance) + \" ADX\"\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\textra: inUSD(stats.userBalance)\n\t\t\t\t})}\n\t\t\t</Grid>\n\n\t\t\t<TableContainer xs={12}>\n\t\t\t\t<Table\n\t\t\t\t\taria-label=\"Bonds table\"\n\t\t\t\t\tstyle={{ marginTop: themeMUI.spacing(2) }}\n\t\t\t\t>\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle}>Bond amount</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tReward to collect\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tPool\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tStatus\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t<TableCell style={headerCellStyle} align=\"right\">\n\t\t\t\t\t\t\t\tActions\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{[...(stats.userBonds || [])].reverse().map(renderBondRow)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\n\t\t\t{bondExplanationFrag}\n\t\t</Grid>\n\t)\n}\n","import React from \"react\"\nimport StatsCard from \"./StatsCard\"\nimport { ZERO } from \"../helpers/constants\"\nimport { Button } from \"@material-ui/core\"\nimport { formatDAI } from \"../helpers/utils\"\n\nexport default function RewardCard({ rewardChannels, onClaimRewards }) {\n\tconst title = \"Your total unclaimed reward\"\n\tconst loaded = rewardChannels != null\n\tif (!loaded) {\n\t\treturn StatsCard({\n\t\t\tloaded,\n\t\t\ttitle,\n\t\t\textra: \"0.00 USD\",\n\t\t\tsubtitle: \"0.00 DAI\"\n\t\t})\n\t}\n\tconst totalReward = rewardChannels\n\t\t.map(x => x.outstandingReward)\n\t\t.reduce((a, b) => a.add(b), ZERO)\n\tconst rewardActions = (\n\t\t<Button\n\t\t\tsize=\"small\"\n\t\t\tvariant=\"contained\"\n\t\t\tcolor=\"secondary\"\n\t\t\tdisabled={totalReward.eq(ZERO)}\n\t\t\tonClick={() => onClaimRewards(rewardChannels)}\n\t\t>\n\t\t\tclaim reward\n\t\t</Button>\n\t)\n\treturn StatsCard({\n\t\tloaded: true,\n\t\ttitle,\n\t\tactions: rewardActions,\n\t\tsubtitle: formatDAI(totalReward) + \" DAI\"\n\t})\n}\n","import React, { useState } from \"react\"\nimport { getPool, formatADX } from \"../helpers/utils\"\nimport {\n\tUNBOND_DAYS,\n\tADX_MULTIPLIER,\n\tZERO,\n\tDEFAULT_BOND,\n\tSTAKING_RULES_URL\n} from \"../helpers/constants\"\nimport { bigNumberify } from \"ethers/utils\"\nimport {\n\tPaper,\n\tGrid,\n\tTextField,\n\tTypography,\n\tButton,\n\tFormControl,\n\tInputLabel,\n\tSelect,\n\tMenuItem,\n\tFormControlLabel,\n\tCheckbox\n} from \"@material-ui/core\"\nimport { themeMUI } from \"../themeMUi\"\n\nexport default function NewBondForm({ maxAmount, onNewBond, pools }) {\n\tconst [bond, setBond] = useState(DEFAULT_BOND)\n\tconst [stakingAmount, setStakingAmount] = useState(0)\n\tconst [amountErr, setAmountErr] = useState(false)\n\tconst [amountErrText, setAmountErrText] = useState(\"\")\n\tconst [confirmation, setConfirmation] = useState(false)\n\tconst [pool, setPool] = useState(\"\")\n\tconst minWidthStyle = { minWidth: \"180px\" }\n\tconst activePool = getPool(pool)\n\n\tconst onAction = () => {\n\t\tsetConfirmation(false)\n\t\tonNewBond(bond)\n\t}\n\n\tconst stakingRulesFrag = STAKING_RULES_URL ? (\n\t\t<>\n\t\t\t&nbsp;and{\" \"}\n\t\t\t<a target=\"_blank\" href={STAKING_RULES_URL}>\n\t\t\t\tstaking conditions\n\t\t\t</a>\n\t\t</>\n\t) : (\n\t\t<></>\n\t)\n\tconst confirmationLabel = (\n\t\t<>\n\t\t\tI understand I am locking up my ADX for at least {UNBOND_DAYS} days and I\n\t\t\tam familiar with the&nbsp;\n\t\t\t<a href=\"https://www.adex.network/tos/\" target=\"_blank\">\n\t\t\t\tTerms and conditions\n\t\t\t</a>\n\t\t\t{stakingRulesFrag}.\n\t\t</>\n\t)\n\n\tconst validateFields = params => {\n\t\tconst { amountBN, poolToValidate } = params\n\t\tconst minStakingAmountBN = poolToValidate\n\t\t\t? bigNumberify(poolToValidate.minStakingAmount * ADX_MULTIPLIER)\n\t\t\t: ZERO\n\n\t\tif (amountBN.gt(maxAmount)) {\n\t\t\tsetAmountErr(true)\n\t\t\tsetAmountErrText(\"Insufficient ADX amount!\")\n\t\t\treturn\n\t\t}\n\t\tif (poolToValidate && amountBN.lt(minStakingAmountBN)) {\n\t\t\tsetAmountErr(true)\n\t\t\tsetAmountErrText(\n\t\t\t\t\"ADX amount less than minimum required for selected pool!\"\n\t\t\t)\n\t\t\treturn\n\t\t}\n\t\tsetAmountErr(false)\n\t\treturn\n\t}\n\n\tconst updateStakingAmount = value => {\n\t\t// since its a number input it can be a negative number which wouldn't make sense so we cap it at 0\n\t\tconst amount = value < 0 ? 0 : value\n\t\tconst amountBN = bigNumberify(Math.floor(amount * ADX_MULTIPLIER))\n\t\tvalidateFields({ amountBN, poolToValidate: activePool })\n\t\tsetStakingAmount(amount)\n\t\tsetBond({\n\t\t\t...bond,\n\t\t\tamount: amountBN\n\t\t})\n\t}\n\n\tconst updatePool = value => {\n\t\tconst amountBN = bigNumberify(Math.floor(stakingAmount * ADX_MULTIPLIER))\n\t\tconst poolToValidate = getPool(value)\n\t\tvalidateFields({ amountBN, poolToValidate })\n\t\tsetPool(value)\n\t\tsetBond({ ...bond, poolId: value })\n\t}\n\n\treturn (\n\t\t<Paper\n\t\t\televation={2}\n\t\t\tstyle={{ width: \"500px\", padding: themeMUI.spacing(2, 4, 3) }}\n\t\t>\n\t\t\t<h2>Create a bond</h2>\n\t\t\t<Grid container spacing={2}>\n\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tlabel=\"ADX amount\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tstyle={minWidthStyle}\n\t\t\t\t\t\tvalue={stakingAmount}\n\t\t\t\t\t\terror={amountErr}\n\t\t\t\t\t\tonChange={ev => updateStakingAmount(ev.target.value)}\n\t\t\t\t\t\thelperText={amountErr ? amountErrText : null}\n\t\t\t\t\t></TextField>\n\t\t\t\t\t<Typography variant=\"subtitle2\">\n\t\t\t\t\t\tMax amount:\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={ev => {\n\t\t\t\t\t\t\t\tsetStakingAmount(\n\t\t\t\t\t\t\t\t\t(maxAmount.toNumber() / ADX_MULTIPLIER).toFixed(4)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tsetBond({ ...bond, amount: maxAmount })\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{formatADX(maxAmount)} ADX\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Typography>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t<FormControl required>\n\t\t\t\t\t\t<InputLabel>Pool</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tstyle={minWidthStyle}\n\t\t\t\t\t\t\tvalue={pool}\n\t\t\t\t\t\t\tonChange={ev => updatePool(ev.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value={\"\"}>\n\t\t\t\t\t\t\t\t<em>None</em>\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t{pools.map(({ label, id }) => (\n\t\t\t\t\t\t\t\t<MenuItem key={id} value={id}>\n\t\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t{activePool ? (\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Typography variant=\"h6\">Pool reward policy:</Typography>\n\t\t\t\t\t\t\t<Typography variant=\"body1\">{activePool.rewardPolicy}</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={12} style={{ marginTop: themeMUI.spacing(2) }}>\n\t\t\t\t\t\t\t<Typography variant=\"h6\">Pool slashing policy:</Typography>\n\t\t\t\t\t\t\t<Typography variant=\"body1\">{activePool.slashPolicy}</Typography>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t) : (\n\t\t\t\t\t\"\"\n\t\t\t\t)}\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tstyle={{ userSelect: \"none\" }}\n\t\t\t\t\t\tlabel={confirmationLabel}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={confirmation}\n\t\t\t\t\t\t\t\tonChange={ev => setConfirmation(ev.target.checked)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t></FormControlLabel>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<FormControl style={{ display: \"flex\" }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t!(\n\t\t\t\t\t\t\t\t\tbond.poolId &&\n\t\t\t\t\t\t\t\t\tconfirmation &&\n\t\t\t\t\t\t\t\t\tbond.amount.gt(ZERO) &&\n\t\t\t\t\t\t\t\t\t!amountErr\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tonClick={onAction}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tStake ADX\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Paper>\n\t)\n}\n","import React, { useEffect, useState } from \"react\"\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\nimport { themeMUI } from \"./themeMUi\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Modal from \"@material-ui/core/Modal\"\nimport Backdrop from \"@material-ui/core/Backdrop\"\nimport Fab from \"@material-ui/core/Fab\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport Fade from \"@material-ui/core/Fade\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\nimport HelperMenu from \"./components/HelperMenu\"\nimport logo from \"./adex-staking.svg\"\nimport { Contract, getDefaultProvider } from \"ethers\"\nimport { bigNumberify, hexZeroPad } from \"ethers/utils\"\nimport { Web3Provider } from \"ethers/providers\"\nimport BalanceTree from \"adex-protocol-eth/js/BalanceTree\"\nimport StakingABI from \"adex-protocol-eth/abi/Staking\"\nimport CoreABI from \"adex-protocol-eth/abi/AdExCore\"\nimport ERC20ABI from \"./abi/ERC20\"\nimport Dashboard from \"./components/Dashboard\"\nimport NewBondForm from \"./components/NewBondForm\"\nimport UnbondConfirmationDialog from \"./components/UnbondConfirmationDialog\"\nimport { ADDR_STAKING, ZERO, POOLS } from \"./helpers/constants\"\nimport { getBondId } from \"./helpers/utils\"\n\nconst ADDR_CORE = \"0x333420fc6a897356e69b62417cd17ff012177d2b\"\nconst ADDR_ADX = \"0x4470bb87d77b963a013db939be332f927f2b992e\"\nconst REFRESH_INTVL = 30000\n\nconst provider = getDefaultProvider()\nconst Staking = new Contract(ADDR_STAKING, StakingABI, provider)\nconst Token = new Contract(ADDR_ADX, ERC20ABI, provider)\nconst Core = new Contract(ADDR_CORE, CoreABI, provider)\n\nconst MAX_SLASH = bigNumberify(\"1000000000000000000\")\n\nconst EMPTY_STATS = {\n\tloaded: false,\n\tuserBonds: [],\n\tuserBalance: ZERO,\n\ttotalStake: ZERO\n}\n\nfunction Alert(props) {\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport default function App() {\n\tconst [isNewBondOpen, setNewBondOpen] = useState(false)\n\tconst [toUnbond, setToUnbond] = React.useState(null)\n\tconst [openErr, setOpenErr] = useState(false)\n\tconst [snackbarErr, setSnackbarErr] = useState(\n\t\t\"Error! Unspecified error occured.\"\n\t)\n\tconst [stats, setStats] = useState(EMPTY_STATS)\n\n\tconst refreshStats = () =>\n\t\tloadStats()\n\t\t\t.then(setStats)\n\t\t\t.catch(e => {\n\t\t\t\tconsole.error(\"loadStats\", e)\n\t\t\t\tsetOpenErr(true)\n\t\t\t\tif (e.code === 4001) {\n\t\t\t\t\tsetSnackbarErr(\"Error! User denied authorization!\")\n\t\t\t\t}\n\t\t\t})\n\tuseEffect(() => {\n\t\trefreshStats()\n\t\tconst intvl = setInterval(refreshStats, REFRESH_INTVL)\n\t\treturn () => clearInterval(intvl)\n\t}, [])\n\n\t// @TODO: move to a separate method\n\t// @TODO handle the case if there is no signer\n\tconst makeUnbondFn = isUnbond => async ({ amount, poolId, nonce }) => {\n\t\tconst signer = await getSigner()\n\t\tif (!signer) return\n\t\tconst staking = new Contract(ADDR_STAKING, StakingABI, signer)\n\t\tconst fn = isUnbond\n\t\t\t? staking.unbond.bind(staking)\n\t\t\t: staking.requestUnbond.bind(staking)\n\t\t// @TODO: refactor into some fn which wraps into a try/catch\n\t\ttry {\n\t\t\tconst tx = await fn([amount, poolId, nonce || ZERO])\n\t\t\tawait tx.wait()\n\t\t} catch (e) {\n\t\t\tsetOpenErr(true)\n\t\t\tsetSnackbarErr(e.message || \"Unknown error\")\n\t\t}\n\t}\n\tconst onRequestUnbond = makeUnbondFn(false)\n\tconst onUnbond = makeUnbondFn(true)\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn\n\t\t}\n\t\tsetOpenErr(false)\n\t}\n\n\tconst checkNewBond = async bond => {\n\t\tsetNewBondOpen(false)\n\t\ttry {\n\t\t\tawait createNewBond(stats, bond)\n\t\t} catch (e) {\n\t\t\tsetOpenErr(true)\n\t\t\tsetSnackbarErr(e.message || \"Unknown error\")\n\t\t}\n\t}\n\n\tconst onClaimRewards = async rewardChannels => {\n\t\ttry {\n\t\t\tawait claimRewards(rewardChannels)\n\t\t} catch (e) {\n\t\t\tsetOpenErr(true)\n\t\t\tsetSnackbarErr(e.message || \"Unknown error\")\n\t\t}\n\t}\n\n\treturn (\n\t\t<MuiThemeProvider theme={themeMUI}>\n\t\t\t<AppBar position=\"static\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<img height=\"40vh\" src={logo} alt=\"logo\"></img>\n\t\t\t\t\t<Fab\n\t\t\t\t\t\tdisabled={!stats.loaded}\n\t\t\t\t\t\tonClick={() => setNewBondOpen(true)}\n\t\t\t\t\t\tvariant=\"extended\"\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ position: \"absolute\", right: \"5%\", top: \"50%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<AddIcon style={{ margin: themeMUI.spacing(1) }} />\n\t\t\t\t\t\tStake your ADX\n\t\t\t\t\t</Fab>\n\t\t\t\t\t{HelperMenu()}\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\n\t\t\t{// if we set onRequestUnbond to setToUnbond, we will get the confirmation dialog\n\t\t\tDashboard({\n\t\t\t\tstats,\n\t\t\t\tonRequestUnbond: setToUnbond,\n\t\t\t\tonUnbond,\n\t\t\t\tonClaimRewards\n\t\t\t})}\n\n\t\t\t{UnbondConfirmationDialog({\n\t\t\t\ttoUnbond,\n\t\t\t\tonDeny: () => setToUnbond(null),\n\t\t\t\tonConfirm: () => {\n\t\t\t\t\tif (toUnbond) onRequestUnbond(toUnbond)\n\t\t\t\t\tsetToUnbond(null)\n\t\t\t\t}\n\t\t\t})}\n\t\t\t<Snackbar open={openErr} autoHideDuration={6000} onClose={handleClose}>\n\t\t\t\t<Alert onClose={handleClose} severity=\"error\">\n\t\t\t\t\t{snackbarErr}\n\t\t\t\t</Alert>\n\t\t\t</Snackbar>\n\t\t\t<Modal\n\t\t\t\topen={isNewBondOpen}\n\t\t\t\tonClose={() => setNewBondOpen(false)}\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t}}\n\t\t\t\tcloseAfterTransition\n\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\tBackdropProps={{\n\t\t\t\t\ttimeout: 300\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Fade in={isNewBondOpen}>\n\t\t\t\t\t{NewBondForm({\n\t\t\t\t\t\tpools: POOLS.filter(x => x.selectable),\n\t\t\t\t\t\tmaxAmount: stats.userBalance,\n\t\t\t\t\t\tonNewBond: checkNewBond\n\t\t\t\t\t})}\n\t\t\t\t</Fade>\n\t\t\t</Modal>\n\t\t</MuiThemeProvider>\n\t)\n}\n\nasync function getSigner() {\n\tif (typeof window.ethereum !== \"undefined\") {\n\t\tawait window.ethereum.enable()\n\t}\n\n\tif (!window.web3) return null\n\n\tconst provider = new Web3Provider(window.web3.currentProvider)\n\tconst signer = provider.getSigner()\n\treturn signer\n}\n\nasync function loadStats() {\n\tconst [totalStake, userStats] = await Promise.all([\n\t\tToken.balanceOf(ADDR_STAKING),\n\t\tloadUserStats()\n\t])\n\n\treturn { totalStake, ...userStats }\n}\n\nasync function loadUserStats() {\n\tconst signer = await getSigner()\n\tif (!signer)\n\t\treturn {\n\t\t\tloaded: true,\n\t\t\tuserBonds: [],\n\t\t\tuserBalance: ZERO,\n\t\t\trewardChannels: []\n\t\t}\n\tconst addr = await signer.getAddress()\n\n\tconst [bondStats, rewardChannels] = await Promise.all([\n\t\tloadBondStats(addr),\n\t\tgetRewards(addr)\n\t])\n\treturn { ...bondStats, loaded: true, rewardChannels }\n}\n\nasync function loadBondStats(addr) {\n\tconst [userBalance, logs, slashLogs] = await Promise.all([\n\t\tToken.balanceOf(addr),\n\t\tprovider.getLogs({\n\t\t\tfromBlock: 0,\n\t\t\taddress: ADDR_STAKING,\n\t\t\ttopics: [null, hexZeroPad(addr, 32)]\n\t\t}),\n\t\tprovider.getLogs({ fromBlock: 0, ...Staking.filters.LogSlash(null, null) })\n\t])\n\n\tconst slashedByPool = slashLogs.reduce((pools, log) => {\n\t\tconst { poolId, newSlashPts } = Staking.interface.parseLog(log).values\n\t\tpools[poolId] = newSlashPts\n\t\treturn pools\n\t}, {})\n\n\tconst userBonds = logs.reduce((bonds, log) => {\n\t\tconst topic = log.topics[0]\n\t\tconst evs = Staking.interface.events\n\t\tif (topic === evs.LogBond.topic) {\n\t\t\tconst vals = Staking.interface.parseLog(log).values\n\t\t\tconst { owner, amount, poolId, nonce, slashedAtStart } = vals\n\t\t\tconst bond = { owner, amount, poolId, nonce, slashedAtStart }\n\t\t\tbonds.push({\n\t\t\t\tid: getBondId(bond),\n\t\t\t\tstatus: \"Active\",\n\t\t\t\tcurrentAmount: bond.amount\n\t\t\t\t\t.mul(MAX_SLASH.sub(slashedByPool[poolId] || ZERO))\n\t\t\t\t\t.div(MAX_SLASH.sub(slashedAtStart)),\n\t\t\t\t...bond\n\t\t\t})\n\t\t} else if (topic === evs.LogUnbondRequested.topic) {\n\t\t\t// NOTE: assuming that .find() will return something is safe, as long as the logs are properly ordered\n\t\t\tconst { bondId, willUnlock } = Staking.interface.parseLog(log).values\n\t\t\tconst bond = bonds.find(({ id }) => id === bondId)\n\t\t\tbond.status = \"UnbondRequested\"\n\t\t\tbond.willUnlock = new Date(willUnlock * 1000)\n\t\t} else if (topic === evs.LogUnbonded.topic) {\n\t\t\tconst { bondId } = Staking.interface.parseLog(log).values\n\t\t\tbonds.find(({ id }) => id === bondId).status = \"Unbonded\"\n\t\t}\n\t\treturn bonds\n\t}, [])\n\n\treturn { userBonds, userBalance }\n}\n\nasync function getRewards(addr) {\n\tconst rewardPool = POOLS[0]\n\tconst resp = await fetch(`${rewardPool.url}/fee-rewards`)\n\tconst rewardChannels = await resp.json()\n\tconst validUntil = Math.floor(Date.now() / 1000)\n\tconst forUser = await Promise.all(\n\t\trewardChannels.map(async rewardChannel => {\n\t\t\tif (rewardChannel.channelArgs.validUntil < validUntil) return null\n\t\t\tif (!rewardChannel.balances[addr]) return null\n\t\t\tconst balanceTree = new BalanceTree(rewardChannel.balances)\n\t\t\tconst outstandingReward = bigNumberify(rewardChannel.balances[addr]).sub(\n\t\t\t\tawait Core.withdrawnPerUser(rewardChannel.channelId, addr)\n\t\t\t)\n\t\t\treturn {\n\t\t\t\t...rewardChannel,\n\t\t\t\toutstandingReward,\n\t\t\t\tproof: balanceTree.getProof(addr),\n\t\t\t\tstateRoot: balanceTree.mTree.getRoot(),\n\t\t\t\tamount: rewardChannel.balances[addr]\n\t\t\t}\n\t\t})\n\t)\n\treturn forUser.filter(x => x)\n}\n\nasync function createNewBond(stats, { amount, poolId, nonce }) {\n\tif (!poolId) return\n\tif (!stats.userBalance) return\n\tif (amount.gt(stats.userBalance)) return\n\tconst signer = await getSigner()\n\tif (!signer) return\n\tconst stakingWithSigner = new Contract(ADDR_STAKING, StakingABI, signer)\n\tconst tokenWithSigner = new Contract(ADDR_ADX, ERC20ABI, signer)\n\tconst allowance = await tokenWithSigner.allowance(\n\t\tawait signer.getAddress(),\n\t\tADDR_STAKING\n\t)\n\tlet txns = []\n\t// Hardcoded gas limit to avoid doing estimateGas - if we do gasEstimate, it will fail on txns[1] cause it depends on txns[0].\n\t// which isn't going to be mined at the time of signing\n\tif (!allowance.eq(amount)) {\n\t\tif (allowance.gt(ZERO)) {\n\t\t\ttxns.push(\n\t\t\t\tawait tokenWithSigner.approve(ADDR_STAKING, ZERO, { gasLimit: 80000 })\n\t\t\t)\n\t\t}\n\t\ttxns.push(\n\t\t\tawait tokenWithSigner.approve(ADDR_STAKING, amount, {\n\t\t\t\tgasLimit: 80000\n\t\t\t})\n\t\t)\n\t}\n\ttxns.push(\n\t\tawait stakingWithSigner.addBond([amount, poolId, nonce || ZERO], {\n\t\t\tgasLimit: 110000\n\t\t})\n\t)\n\t// const receipts = await Promise.all(txns.map(tx => tx.wait()))\n\tawait Promise.all(txns.map(tx => tx.wait()))\n}\n\nasync function claimRewards(rewardChannels) {\n\tconst signer = await getSigner()\n\tif (!signer) return\n\tconst coreWithSigner = new Contract(ADDR_CORE, CoreABI, signer)\n\tlet txns = []\n\tfor (const rewardChannel of rewardChannels) {\n\t\tconst args = rewardChannel.channelArgs\n\t\tconst channelTuple = [\n\t\t\targs.creator,\n\t\t\targs.tokenAddr,\n\t\t\targs.tokenAmount,\n\t\t\targs.validUntil,\n\t\t\targs.validators,\n\t\t\targs.spec\n\t\t]\n\t\ttxns.push(\n\t\t\tawait coreWithSigner.channelWithdraw(\n\t\t\t\tchannelTuple,\n\t\t\t\trewardChannel.stateRoot,\n\t\t\t\trewardChannel.signatures,\n\t\t\t\trewardChannel.proof,\n\t\t\t\trewardChannel.amount\n\t\t\t)\n\t\t)\n\t}\n\treturn Promise.all(txns.map(tx => tx.wait()))\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Menu from \"@material-ui/core/Menu\"\nimport HelpIcon from \"@material-ui/icons/HelpOutline\"\nimport Link from \"@material-ui/core/Link\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nexport default () => {\n\tconst [menuEl, setMenuEl] = useState(null)\n\tconst openHelpMenu = ev => {\n\t\tsetMenuEl(ev.currentTarget)\n\t}\n\tconst closeHelpMenu = () => {\n\t\tsetMenuEl(null)\n\t}\n\treturn (\n\t\t<>\n\t\t\t<IconButton\n\t\t\t\tstyle={{ position: \"absolute\", right: \"1.25%\", top: \"10%\" }}\n\t\t\t\tonClick={openHelpMenu}\n\t\t\t>\n\t\t\t\t<HelpIcon style={{ fontSize: \"1.5em\", color: \"white\" }} />\n\t\t\t</IconButton>\n\t\t\t<Menu\n\t\t\t\tid=\"simple-menu\"\n\t\t\t\tanchorEl={menuEl}\n\t\t\t\topen={Boolean(menuEl)}\n\t\t\t\tkeepMounted\n\t\t\t\tonClose={closeHelpMenu}\n\t\t\t\tgetContentAnchorEl={null}\n\t\t\t\tanchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n\t\t\t\ttransformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n\t\t\t>\n\t\t\t\t<Link href=\"https://www.adex.network/tos\" target=\"_blank\">\n\t\t\t\t\t<MenuItem onClick={closeHelpMenu}>Terms of Service</MenuItem>\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\thref=\"https://www.adex.network/blog/adx-staking-is-here/\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t<MenuItem onClick={closeHelpMenu}>User Guide</MenuItem>\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\thref=\"https://github.com/adexnetwork/adex-protocol-eth\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t<MenuItem onClick={closeHelpMenu}>Source Code</MenuItem>\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\thref=\"https://coinmarketcap.com/currencies/adx-net/markets/\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t<MenuItem onClick={closeHelpMenu}>Where to buy ADX</MenuItem>\n\t\t\t\t</Link>\n\t\t\t</Menu>\n\t\t</>\n\t)\n}\n","import React from \"react\"\nimport {\n\tDialog,\n\tDialogTitle,\n\tDialogContent,\n\tDialogActions,\n\tButton\n} from \"@material-ui/core\"\nimport { ZERO, UNBOND_DAYS } from \"../helpers/constants\"\nimport { formatADX } from \"../helpers/utils\"\n\nexport default function UnbondConfirmationDialog({\n\ttoUnbond,\n\tonDeny,\n\tonConfirm\n}) {\n\treturn (\n\t\t<Dialog open={!!toUnbond} onClose={onDeny}>\n\t\t\t<DialogTitle id=\"alert-dialog-title\">Are you sure?</DialogTitle>\n\t\t\t<DialogContent>\n\t\t\t\tAre you sure you want to request unbonding of{\" \"}\n\t\t\t\t{formatADX(toUnbond ? toUnbond.currentAmount : ZERO)} ADX?\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\tPlease be aware:\n\t\t\t\t<ol>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tIt will take {UNBOND_DAYS} days before you will be able to withdraw\n\t\t\t\t\t\tyour ADX!\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\tYou will not receive staking rewards for this amount in this{\" \"}\n\t\t\t\t\t\t{UNBOND_DAYS} day period.\n\t\t\t\t\t</li>\n\t\t\t\t</ol>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button onClick={onDeny} autoFocus color=\"primary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={onConfirm} color=\"primary\">\n\t\t\t\t\tUnbond\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t)\n}\n"],"sourceRoot":""}